/* webkitgtk-3.0.vapi generated by vapigen-0.16, do not modify. */

[CCode (cprefix = "WebKit", gir_namespace = "WebKit", gir_version = "3.0", lower_case_cprefix = "webkit_")]
namespace WebKit {
	namespace DOM {
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_attr_get_type ()")]
		[GIR (name = "DOMAttr")]
		public class Attr : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Attr ();
			public bool get_is_id ();
			public string get_name ();
			public unowned WebKit.DOM.Element get_owner_element ();
			public bool get_specified ();
			public string get_value ();
			public void set_value (string value) throws GLib.Error;
			public bool is_id { get; }
			public string name { owned get; }
			public WebKit.DOM.Element owner_element { get; }
			public bool specified { get; }
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_bar_info_get_type ()")]
		[GIR (name = "DOMBarInfo")]
		public class BarInfo : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected BarInfo ();
			public bool get_visible ();
			public bool visible { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_blob_get_type ()")]
		[GIR (name = "DOMBlob")]
		public class Blob : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Blob ();
			public uint64 get_size ();
			public unowned WebKit.DOM.Blob webkit_slice (int64 start, int64 end, string content_type);
			public uint64 size { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_cdata_section_get_type ()")]
		[GIR (name = "DOMCDATASection")]
		public class CDATASection : WebKit.DOM.Text, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected CDATASection ();
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_css_rule_get_type ()")]
		[GIR (name = "DOMCSSRule")]
		public class CSSRule : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSRule ();
			public string get_css_text ();
			public unowned WebKit.DOM.CSSRule get_parent_rule ();
			public unowned WebKit.DOM.CSSStyleSheet get_parent_style_sheet ();
			public void set_css_text (string value) throws GLib.Error;
			public string css_text { owned get; set; }
			public WebKit.DOM.CSSRule parent_rule { get; }
			public WebKit.DOM.CSSStyleSheet parent_style_sheet { get; }
			[NoAccessorMethod]
			public uint type { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_css_rule_list_get_type ()")]
		[GIR (name = "DOMCSSRuleList")]
		public class CSSRuleList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSRuleList ();
			public ulong get_length ();
			public unowned WebKit.DOM.CSSRule item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_css_style_declaration_get_type ()")]
		[GIR (name = "DOMCSSStyleDeclaration")]
		public class CSSStyleDeclaration : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSStyleDeclaration ();
			public string get_css_text ();
			public ulong get_length ();
			public unowned WebKit.DOM.CSSRule get_parent_rule ();
			public unowned WebKit.DOM.CSSValue get_property_css_value (string property_name);
			public string get_property_priority (string property_name);
			public string get_property_shorthand (string property_name);
			public string get_property_value (string property_name);
			public bool is_property_implicit (string property_name);
			public string item (ulong index);
			public string remove_property (string property_name) throws GLib.Error;
			public void set_css_text (string value) throws GLib.Error;
			public void set_property (string property_name, string value, string priority) throws GLib.Error;
			public string css_text { owned get; set; }
			public ulong length { get; }
			public WebKit.DOM.CSSRule parent_rule { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_css_style_sheet_get_type ()")]
		[GIR (name = "DOMCSSStyleSheet")]
		public class CSSStyleSheet : WebKit.DOM.StyleSheet {
			[CCode (has_construct_function = false)]
			protected CSSStyleSheet ();
			public long add_rule (string selector, string style, ulong index) throws GLib.Error;
			public void delete_rule (ulong index) throws GLib.Error;
			public unowned WebKit.DOM.CSSRuleList get_css_rules ();
			public unowned WebKit.DOM.CSSRule get_owner_rule ();
			public unowned WebKit.DOM.CSSRuleList get_rules ();
			public ulong insert_rule (string rule, ulong index) throws GLib.Error;
			public void remove_rule (ulong index) throws GLib.Error;
			public WebKit.DOM.CSSRuleList css_rules { get; }
			public WebKit.DOM.CSSRule owner_rule { get; }
			public WebKit.DOM.CSSRuleList rules { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_css_value_get_type ()")]
		[GIR (name = "DOMCSSValue")]
		public class CSSValue : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSValue ();
			public string get_css_text ();
			public ushort get_css_value_type ();
			public void set_css_text (string value) throws GLib.Error;
			public string css_text { owned get; set; }
			public uint css_value_type { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_character_data_get_type ()")]
		[GIR (name = "DOMCharacterData")]
		public class CharacterData : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected CharacterData ();
			public void append_data (string data) throws GLib.Error;
			public void delete_data (ulong offset, ulong length) throws GLib.Error;
			public string get_data ();
			public ulong get_length ();
			public void insert_data (ulong offset, string data) throws GLib.Error;
			public void replace_data (ulong offset, ulong length, string data) throws GLib.Error;
			public void set_data (string value) throws GLib.Error;
			public string substring_data (ulong offset, ulong length) throws GLib.Error;
			public string data { owned get; set; }
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_comment_get_type ()")]
		[GIR (name = "DOMComment")]
		public class Comment : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Comment ();
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_console_get_type ()")]
		[GIR (name = "DOMConsole")]
		public class Console : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Console ();
			public unowned WebKit.DOM.MemoryInfo get_memory ();
			public void group_end ();
			public void time (string title);
			public WebKit.DOM.MemoryInfo memory { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h")]
		[Compact]
		[GIR (name = "DOMCustom")]
		public class Custom {
		}
		[CCode (cheader_filename = "webkit/webkit.h")]
		[Compact]
		[GIR (name = "DOMCustomClass")]
		public class CustomClass {
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_application_cache_get_type ()")]
		[GIR (name = "DOMDOMApplicationCache")]
		public class DOMApplicationCache : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DOMApplicationCache ();
			public void abort ();
			public ushort get_status ();
			public void swap_cache () throws GLib.Error;
			public void update () throws GLib.Error;
			public uint status { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_implementation_get_type ()")]
		[GIR (name = "DOMDOMImplementation")]
		public class DOMImplementation : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMImplementation ();
			public unowned WebKit.DOM.CSSStyleSheet create_css_style_sheet (string title, string media) throws GLib.Error;
			public unowned WebKit.DOM.Document create_document (string namespace_uri, string qualified_name, WebKit.DOM.DocumentType doctype) throws GLib.Error;
			public unowned WebKit.DOM.DocumentType create_document_type (string qualified_name, string public_id, string system_id) throws GLib.Error;
			public unowned WebKit.DOM.HTMLDocument create_html_document (string title);
			public bool has_feature (string feature, string version);
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_mime_type_get_type ()")]
		[GIR (name = "DOMDOMMimeType")]
		public class DOMMimeType : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMMimeType ();
			public string get_description ();
			public unowned WebKit.DOM.DOMPlugin get_enabled_plugin ();
			public string get_suffixes ();
			public string description { owned get; }
			public WebKit.DOM.DOMPlugin enabled_plugin { get; }
			public string suffixes { owned get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_mime_type_array_get_type ()")]
		[GIR (name = "DOMDOMMimeTypeArray")]
		public class DOMMimeTypeArray : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMMimeTypeArray ();
			public ulong get_length ();
			public unowned WebKit.DOM.DOMMimeType item (ulong index);
			public unowned WebKit.DOM.DOMMimeType named_item (string name);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_plugin_get_type ()")]
		[GIR (name = "DOMDOMPlugin")]
		public class DOMPlugin : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMPlugin ();
			public string get_description ();
			public string get_filename ();
			public ulong get_length ();
			public string get_name ();
			public unowned WebKit.DOM.DOMMimeType item (ulong index);
			public unowned WebKit.DOM.DOMMimeType named_item (string name);
			public string description { owned get; }
			public string filename { owned get; }
			public ulong length { get; }
			public string name { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_plugin_array_get_type ()")]
		[GIR (name = "DOMDOMPluginArray")]
		public class DOMPluginArray : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMPluginArray ();
			public ulong get_length ();
			public unowned WebKit.DOM.DOMPlugin item (ulong index);
			public unowned WebKit.DOM.DOMPlugin named_item (string name);
			public void refresh (bool reload);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_selection_get_type ()")]
		[GIR (name = "DOMDOMSelection")]
		public class DOMSelection : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMSelection ();
			public void add_range (WebKit.DOM.Range range);
			public void collapse (WebKit.DOM.Node node, long index) throws GLib.Error;
			public void collapse_to_end () throws GLib.Error;
			public void collapse_to_start () throws GLib.Error;
			public bool contains_node (WebKit.DOM.Node node, bool allow_partial);
			public void delete_from_document ();
			public void empty ();
			public void extend (WebKit.DOM.Node node, long offset) throws GLib.Error;
			public unowned WebKit.DOM.Node get_anchor_node ();
			public long get_anchor_offset ();
			public unowned WebKit.DOM.Node get_base_node ();
			public long get_base_offset ();
			public unowned WebKit.DOM.Node get_extent_node ();
			public long get_extent_offset ();
			public unowned WebKit.DOM.Node get_focus_node ();
			public long get_focus_offset ();
			public bool get_is_collapsed ();
			public unowned WebKit.DOM.Range get_range_at (long index) throws GLib.Error;
			public long get_range_count ();
			public void modify (string alter, string direction, string granularity);
			public void remove_all_ranges ();
			public void select_all_children (WebKit.DOM.Node node) throws GLib.Error;
			public void set_base_and_extent (WebKit.DOM.Node base_node, long base_offset, WebKit.DOM.Node extent_node, long extent_offset) throws GLib.Error;
			public void set_position (WebKit.DOM.Node node, long offset) throws GLib.Error;
			public WebKit.DOM.Node anchor_node { get; }
			public long anchor_offset { get; }
			public WebKit.DOM.Node base_node { get; }
			public long base_offset { get; }
			public WebKit.DOM.Node extent_node { get; }
			public long extent_offset { get; }
			public WebKit.DOM.Node focus_node { get; }
			public long focus_offset { get; }
			public bool is_collapsed { get; }
			public long range_count { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_settable_token_list_get_type ()")]
		[GIR (name = "DOMDOMSettableTokenList")]
		public class DOMSettableTokenList : WebKit.DOM.DOMTokenList {
			[CCode (has_construct_function = false)]
			protected DOMSettableTokenList ();
			public string get_value ();
			public void set_value (string value);
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_string_list_get_type ()")]
		[GIR (name = "DOMDOMStringList")]
		public class DOMStringList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMStringList ();
			public bool contains (string string);
			public ulong get_length ();
			public string item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_string_map_get_type ()")]
		[GIR (name = "DOMDOMStringMap")]
		public class DOMStringMap : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMStringMap ();
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_token_list_get_type ()")]
		[GIR (name = "DOMDOMTokenList")]
		public class DOMTokenList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMTokenList ();
			public void add (string token) throws GLib.Error;
			public bool contains (string token) throws GLib.Error;
			public ulong get_length ();
			public string item (ulong index);
			public void remove (string token) throws GLib.Error;
			public bool toggle (string token) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_dom_window_get_type ()")]
		[GIR (name = "DOMDOMWindow")]
		public class DOMWindow : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DOMWindow ();
			public void alert (string message);
			public string atob (string string) throws GLib.Error;
			public void blur ();
			public string btoa (string string) throws GLib.Error;
			public void capture_events ();
			public void clear_interval (long handle);
			public void clear_timeout (long handle);
			public void close ();
			public bool confirm (string message);
			public bool find (string string, bool case_sensitive, bool backwards, bool wrap, bool whole_word, bool search_in_frames, bool show_dialog);
			public void focus ();
			public unowned WebKit.DOM.DOMApplicationCache get_application_cache ();
			public unowned WebKit.DOM.Navigator get_client_information ();
			public bool get_closed ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_computed_style (WebKit.DOM.Element element, string pseudo_element);
			public unowned WebKit.DOM.Console get_console ();
			public string get_default_status ();
			public double get_device_pixel_ratio ();
			public unowned WebKit.DOM.Document get_document ();
			public unowned WebKit.DOM.Element get_frame_element ();
			public unowned WebKit.DOM.DOMWindow get_frames ();
			public unowned WebKit.DOM.History get_history ();
			public long get_inner_height ();
			public long get_inner_width ();
			public ulong get_length ();
			public unowned WebKit.DOM.Storage get_local_storage () throws GLib.Error;
			public unowned WebKit.DOM.BarInfo get_locationbar ();
			public unowned WebKit.DOM.BarInfo get_menubar ();
			public string get_name ();
			public unowned WebKit.DOM.Navigator get_navigator ();
			public bool get_offscreen_buffering ();
			public unowned WebKit.DOM.DOMWindow get_opener ();
			public long get_outer_height ();
			public long get_outer_width ();
			public long get_page_x_offset ();
			public long get_page_y_offset ();
			public unowned WebKit.DOM.DOMWindow get_parent ();
			public unowned WebKit.DOM.BarInfo get_personalbar ();
			public unowned WebKit.DOM.Screen get_screen ();
			public long get_screen_left ();
			public long get_screen_top ();
			public long get_screen_x ();
			public long get_screen_y ();
			public long get_scroll_x ();
			public long get_scroll_y ();
			public unowned WebKit.DOM.BarInfo get_scrollbars ();
			public unowned WebKit.DOM.DOMSelection get_selection ();
			public unowned WebKit.DOM.DOMWindow get_self ();
			public unowned WebKit.DOM.Storage get_session_storage () throws GLib.Error;
			public string get_status ();
			public unowned WebKit.DOM.BarInfo get_statusbar ();
			public unowned WebKit.DOM.StyleMedia get_style_media ();
			public unowned WebKit.DOM.BarInfo get_toolbar ();
			public unowned WebKit.DOM.DOMWindow get_top ();
			public unowned WebKit.DOM.DOMWindow get_window ();
			public unowned WebKit.DOM.MediaQueryList match_media (string query);
			public void move_by (float x, float y);
			public void move_to (float x, float y);
			public void print ();
			public string prompt (string message, string default_value);
			public void release_events ();
			public void resize_by (float x, float y);
			public void resize_to (float width, float height);
			public void scroll (long x, long y);
			public void scroll_by (long x, long y);
			public void scroll_to (long x, long y);
			public void set_default_status (string value);
			public void set_name (string value);
			public void set_status (string value);
			public void stop ();
			public unowned WebKit.DOM.WebKitPoint webkit_convert_point_from_node_to_page (WebKit.DOM.Node node, WebKit.DOM.WebKitPoint p);
			public unowned WebKit.DOM.WebKitPoint webkit_convert_point_from_page_to_node (WebKit.DOM.Node node, WebKit.DOM.WebKitPoint p);
			public WebKit.DOM.DOMApplicationCache application_cache { get; }
			[NoAccessorMethod]
			public WebKit.DOM.Navigator client_information { owned get; set; }
			public bool closed { get; }
			[NoAccessorMethod]
			public WebKit.DOM.Console console { owned get; set; }
			public string default_status { owned get; set; }
			[NoAccessorMethod]
			public double device_pixel_ratio { get; set; }
			public WebKit.DOM.Document document { get; }
			public WebKit.DOM.Element frame_element { get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow frames { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.History history { owned get; set; }
			[NoAccessorMethod]
			public long inner_height { get; set; }
			[NoAccessorMethod]
			public long inner_width { get; set; }
			[NoAccessorMethod]
			public ulong length { get; set; }
			public WebKit.DOM.Storage local_storage { get; }
			[NoAccessorMethod]
			public WebKit.DOM.BarInfo locationbar { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.BarInfo menubar { owned get; set; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.Navigator navigator { owned get; set; }
			[NoAccessorMethod]
			public bool offscreen_buffering { get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow opener { owned get; set; }
			[NoAccessorMethod]
			public long outer_height { get; set; }
			[NoAccessorMethod]
			public long outer_width { get; set; }
			public long page_x_offset { get; }
			public long page_y_offset { get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow parent { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.BarInfo personalbar { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.Screen screen { owned get; set; }
			[NoAccessorMethod]
			public long screen_left { get; set; }
			[NoAccessorMethod]
			public long screen_top { get; set; }
			[NoAccessorMethod]
			public long screen_x { get; set; }
			[NoAccessorMethod]
			public long screen_y { get; set; }
			[NoAccessorMethod]
			public long scroll_x { get; set; }
			[NoAccessorMethod]
			public long scroll_y { get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.BarInfo scrollbars { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow self { owned get; set; }
			public WebKit.DOM.Storage session_storage { get; }
			public string status { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.BarInfo statusbar { owned get; set; }
			public WebKit.DOM.StyleMedia style_media { get; }
			[NoAccessorMethod]
			public WebKit.DOM.BarInfo toolbar { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow top { owned get; set; }
			public WebKit.DOM.DOMWindow window { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_database_get_type ()")]
		[GIR (name = "DOMDatabase")]
		public class Database : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Database ();
			public string get_version ();
			public string version { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_document_get_type ()")]
		[GIR (name = "DOMDocument")]
		public class Document : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Document ();
			public unowned WebKit.DOM.Node adopt_node (WebKit.DOM.Node source) throws GLib.Error;
			public unowned WebKit.DOM.Range caret_range_from_point (long x, long y);
			public unowned WebKit.DOM.Attr create_attribute (string name) throws GLib.Error;
			public unowned WebKit.DOM.Attr create_attribute_ns (string namespace_uri, string qualified_name) throws GLib.Error;
			public unowned WebKit.DOM.CDATASection create_cdata_section (string data) throws GLib.Error;
			public unowned WebKit.DOM.Comment create_comment (string data);
			public unowned WebKit.DOM.CSSStyleDeclaration create_css_style_declaration ();
			public unowned WebKit.DOM.DocumentFragment create_document_fragment ();
			public unowned WebKit.DOM.Element create_element (string tag_name) throws GLib.Error;
			public unowned WebKit.DOM.Element create_element_ns (string namespace_uri, string qualified_name) throws GLib.Error;
			public unowned WebKit.DOM.EntityReference create_entity_reference (string name) throws GLib.Error;
			public unowned WebKit.DOM.Event create_event (string event_type) throws GLib.Error;
			public unowned WebKit.DOM.XPathExpression create_expression (string expression, WebKit.DOM.XPathNSResolver resolver) throws GLib.Error;
			public unowned WebKit.DOM.NodeIterator create_node_iterator (WebKit.DOM.Node root, ulong what_to_show, WebKit.DOM.NodeFilter filter, bool expand_entity_references) throws GLib.Error;
			public unowned WebKit.DOM.XPathNSResolver create_ns_resolver (WebKit.DOM.Node node_resolver);
			public unowned WebKit.DOM.ProcessingInstruction create_processing_instruction (string target, string data) throws GLib.Error;
			public unowned WebKit.DOM.Range create_range ();
			public unowned WebKit.DOM.Text create_text_node (string data);
			public unowned WebKit.DOM.TreeWalker create_tree_walker (WebKit.DOM.Node root, ulong what_to_show, WebKit.DOM.NodeFilter filter, bool expand_entity_references) throws GLib.Error;
			public unowned WebKit.DOM.Element element_from_point (long x, long y);
			public unowned WebKit.DOM.XPathResult evaluate (string expression, WebKit.DOM.Node context_node, WebKit.DOM.XPathNSResolver resolver, ushort type, WebKit.DOM.XPathResult in_result) throws GLib.Error;
			public bool exec_command (string command, bool user_interface, string value);
			public unowned WebKit.DOM.HTMLCollection get_anchors ();
			public unowned WebKit.DOM.HTMLCollection get_applets ();
			public unowned WebKit.DOM.HTMLElement get_body ();
			public string get_character_set ();
			public string get_charset ();
			public string get_compat_mode ();
			public string get_cookie () throws GLib.Error;
			public string get_default_charset ();
			public unowned WebKit.DOM.DOMWindow get_default_view ();
			public unowned WebKit.DOM.DocumentType get_doctype ();
			public unowned WebKit.DOM.Element get_document_element ();
			public string get_document_uri ();
			public string get_domain ();
			public unowned WebKit.DOM.Element get_element_by_id (string element_id);
			public unowned WebKit.DOM.NodeList get_elements_by_class_name (string tagname);
			public unowned WebKit.DOM.NodeList get_elements_by_name (string element_name);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name (string tagname);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name_ns (string namespace_uri, string local_name);
			public unowned WebKit.DOM.HTMLCollection get_forms ();
			public unowned WebKit.DOM.HTMLHeadElement get_head ();
			public unowned WebKit.DOM.HTMLCollection get_images ();
			public unowned WebKit.DOM.DOMImplementation get_implementation ();
			public string get_input_encoding ();
			public string get_last_modified ();
			public unowned WebKit.DOM.HTMLCollection get_links ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_override_style (WebKit.DOM.Element element, string pseudo_element);
			public string get_preferred_stylesheet_set ();
			public string get_ready_state ();
			public string get_referrer ();
			public string get_selected_stylesheet_set ();
			public unowned WebKit.DOM.StyleSheetList get_style_sheets ();
			public string get_title ();
			public unowned WebKit.DOM.Element get_webkit_current_full_screen_element ();
			public bool get_webkit_full_screen_keyboard_input_allowed ();
			public bool get_webkit_hidden ();
			public bool get_webkit_is_full_screen ();
			public string get_webkit_visibility_state ();
			public string get_xml_encoding ();
			public bool get_xml_standalone ();
			public string get_xml_version ();
			public unowned WebKit.DOM.Node import_node (WebKit.DOM.Node imported_node, bool deep) throws GLib.Error;
			public bool query_command_enabled (string command);
			public bool query_command_indeterm (string command);
			public bool query_command_state (string command);
			public bool query_command_supported (string command);
			public string query_command_value (string command);
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
			public void set_body (WebKit.DOM.HTMLElement value) throws GLib.Error;
			public void set_charset (string value);
			public void set_cookie (string value) throws GLib.Error;
			public void set_document_uri (string value);
			public void set_selected_stylesheet_set (string value);
			public void set_title (string value);
			public void set_xml_standalone (bool value) throws GLib.Error;
			public void set_xml_version (string value) throws GLib.Error;
			public void webkit_cancel_full_screen ();
			public unowned WebKit.DOM.WebKitNamedFlow webkit_get_flow_by_name (string name);
			public WebKit.DOM.HTMLCollection anchors { get; }
			public WebKit.DOM.HTMLCollection applets { get; }
			public WebKit.DOM.HTMLElement body { get; set; }
			public string character_set { owned get; }
			public string charset { owned get; set; }
			public string compat_mode { owned get; }
			public string cookie { owned get; set; }
			public string default_charset { owned get; }
			public WebKit.DOM.DOMWindow default_view { get; }
			public WebKit.DOM.DocumentType doctype { get; }
			public WebKit.DOM.Element document_element { get; }
			public string document_uri { owned get; set; }
			public string domain { owned get; }
			public WebKit.DOM.HTMLCollection forms { get; }
			public WebKit.DOM.HTMLHeadElement head { get; }
			public WebKit.DOM.HTMLCollection images { get; }
			public WebKit.DOM.DOMImplementation implementation { get; }
			public string input_encoding { owned get; }
			public string last_modified { owned get; }
			public WebKit.DOM.HTMLCollection links { get; }
			public string preferred_stylesheet_set { owned get; }
			public string ready_state { owned get; }
			public string referrer { owned get; }
			public string selected_stylesheet_set { owned get; set; }
			public WebKit.DOM.StyleSheetList style_sheets { get; }
			public string title { owned get; set; }
			[NoAccessorMethod]
			public string url { owned get; }
			public WebKit.DOM.Element webkit_current_full_screen_element { get; }
			public bool webkit_full_screen_keyboard_input_allowed { get; }
			public bool webkit_is_full_screen { get; }
			public string xml_encoding { owned get; }
			public bool xml_standalone { get; set; }
			public string xml_version { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_document_fragment_get_type ()")]
		[GIR (name = "DOMDocumentFragment")]
		public class DocumentFragment : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DocumentFragment ();
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_document_type_get_type ()")]
		[GIR (name = "DOMDocumentType")]
		public class DocumentType : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DocumentType ();
			public unowned WebKit.DOM.NamedNodeMap get_entities ();
			public string get_internal_subset ();
			public string get_name ();
			public unowned WebKit.DOM.NamedNodeMap get_notations ();
			public string get_public_id ();
			public string get_system_id ();
			public WebKit.DOM.NamedNodeMap entities { get; }
			public string internal_subset { owned get; }
			public string name { owned get; }
			public WebKit.DOM.NamedNodeMap notations { get; }
			public string public_id { owned get; }
			public string system_id { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_element_get_type ()")]
		[GIR (name = "DOMElement")]
		public class Element : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Element ();
			public void blur ();
			public void focus ();
			public string get_attribute (string name);
			public unowned WebKit.DOM.Attr get_attribute_node (string name);
			public unowned WebKit.DOM.Attr get_attribute_node_ns (string namespace_uri, string local_name);
			public string get_attribute_ns (string namespace_uri, string local_name);
			public ulong get_child_element_count ();
			public long get_client_height ();
			public long get_client_left ();
			public long get_client_top ();
			public long get_client_width ();
			public unowned WebKit.DOM.NodeList get_elements_by_class_name (string name);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name (string name);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name_ns (string namespace_uri, string local_name);
			public unowned WebKit.DOM.Element get_first_element_child ();
			public unowned WebKit.DOM.Element get_last_element_child ();
			public unowned WebKit.DOM.Element get_next_element_sibling ();
			public long get_offset_height ();
			public long get_offset_left ();
			public unowned WebKit.DOM.Element get_offset_parent ();
			public long get_offset_top ();
			public long get_offset_width ();
			public unowned WebKit.DOM.Element get_previous_element_sibling ();
			public long get_scroll_height ();
			public long get_scroll_left ();
			public long get_scroll_top ();
			public long get_scroll_width ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_style ();
			public string get_tag_name ();
			public bool has_attribute (string name);
			public bool has_attribute_ns (string namespace_uri, string local_name);
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
			public void remove_attribute (string name);
			public unowned WebKit.DOM.Attr remove_attribute_node (WebKit.DOM.Attr old_attr) throws GLib.Error;
			public void remove_attribute_ns (string namespace_uri, string local_name);
			public void scroll_by_lines (long lines);
			public void scroll_by_pages (long pages);
			public void scroll_into_view (bool align_with_top);
			public void scroll_into_view_if_needed (bool center_if_needed);
			public void set_attribute (string name, string value) throws GLib.Error;
			public unowned WebKit.DOM.Attr set_attribute_node (WebKit.DOM.Attr new_attr) throws GLib.Error;
			public unowned WebKit.DOM.Attr set_attribute_node_ns (WebKit.DOM.Attr new_attr) throws GLib.Error;
			public void set_attribute_ns (string namespace_uri, string qualified_name, string value) throws GLib.Error;
			public void set_scroll_left (long value);
			public void set_scroll_top (long value);
			public bool webkit_matches_selector (string selectors) throws GLib.Error;
			public void webkit_request_full_screen (ushort flags);
			public ulong child_element_count { get; }
			public long client_height { get; }
			public long client_left { get; }
			public long client_top { get; }
			public long client_width { get; }
			public WebKit.DOM.Element first_element_child { get; }
			public WebKit.DOM.Element last_element_child { get; }
			public WebKit.DOM.Element next_element_sibling { get; }
			public long offset_height { get; }
			public long offset_left { get; }
			public WebKit.DOM.Element offset_parent { get; }
			public long offset_top { get; }
			public long offset_width { get; }
			public WebKit.DOM.Element previous_element_sibling { get; }
			public long scroll_height { get; }
			public long scroll_left { get; set; }
			public long scroll_top { get; set; }
			public long scroll_width { get; }
			public WebKit.DOM.CSSStyleDeclaration style { get; }
			public string tag_name { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_entity_reference_get_type ()")]
		[GIR (name = "DOMEntityReference")]
		public class EntityReference : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected EntityReference ();
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_event_get_type ()")]
		[GIR (name = "DOMEvent")]
		public class Event : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Event ();
			public bool get_bubbles ();
			public bool get_cancel_bubble ();
			public bool get_cancelable ();
			public unowned WebKit.DOM.EventTarget get_current_target ();
			public bool get_default_prevented ();
			public ushort get_event_phase ();
			public bool get_return_value ();
			public unowned WebKit.DOM.EventTarget get_src_element ();
			public unowned WebKit.DOM.EventTarget get_target ();
			public uint32 get_time_stamp ();
			public void init_event (string event_type_arg, bool can_bubble_arg, bool cancelable_arg);
			public void prevent_default ();
			public void set_cancel_bubble (bool value);
			public void set_return_value (bool value);
			public void stop_immediate_propagation ();
			public void stop_propagation ();
			public bool bubbles { get; }
			public bool cancel_bubble { get; set; }
			public bool cancelable { get; }
			public WebKit.DOM.EventTarget current_target { get; }
			public bool default_prevented { get; }
			public uint event_phase { get; }
			public bool return_value { get; set; }
			public WebKit.DOM.EventTarget src_element { get; }
			public WebKit.DOM.EventTarget target { get; }
			public uint time_stamp { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h")]
		[Compact]
		[GIR (name = "DOMEventTargetClass")]
		public class EventTargetClass {
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_file_get_type ()")]
		[GIR (name = "DOMFile")]
		public class File : WebKit.DOM.Blob {
			[CCode (has_construct_function = false)]
			protected File ();
			public string get_file_name ();
			public uint64 get_file_size ();
			public string get_name ();
			public string file_name { owned get; }
			public uint64 file_size { get; }
			public string name { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_file_list_get_type ()")]
		[GIR (name = "DOMFileList")]
		public class FileList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected FileList ();
			public ulong get_length ();
			public unowned WebKit.DOM.File item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_anchor_element_get_type ()")]
		[GIR (name = "DOMHTMLAnchorElement")]
		public class HTMLAnchorElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAnchorElement ();
			public string get_charset ();
			public string get_coords ();
			public string get_download ();
			public string get_hash ();
			public string get_host ();
			public string get_hostname ();
			public string get_href ();
			public string get_hreflang ();
			public string get_name ();
			public string get_origin ();
			public string get_pathname ();
			public string get_ping ();
			public string get_port ();
			public string get_protocol ();
			public string get_rel ();
			public string get_rev ();
			public string get_search ();
			public string get_shape ();
			public string get_target ();
			public string get_text ();
			public void set_charset (string value);
			public void set_coords (string value);
			public void set_download (string value);
			public void set_hash (string value);
			public void set_host (string value);
			public void set_hostname (string value);
			public void set_href (string value);
			public void set_hreflang (string value);
			public void set_name (string value);
			public void set_pathname (string value);
			public void set_ping (string value);
			public void set_port (string value);
			public void set_protocol (string value);
			public void set_rel (string value);
			public void set_rev (string value);
			public void set_search (string value);
			public void set_shape (string value);
			public void set_target (string value);
			public string charset { owned get; set; }
			public string coords { owned get; set; }
			public string hash { owned get; set; }
			public string host { owned get; set; }
			public string hostname { owned get; set; }
			public string href { owned get; set; }
			public string hreflang { owned get; set; }
			public string name { owned get; set; }
			public string origin { owned get; }
			public string pathname { owned get; set; }
			public string ping { owned get; set; }
			public string port { owned get; set; }
			public string protocol { owned get; set; }
			public string rel { owned get; set; }
			public string rev { owned get; set; }
			public string search { owned get; set; }
			public string shape { owned get; set; }
			public string target { owned get; set; }
			public string text { owned get; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_applet_element_get_type ()")]
		[GIR (name = "DOMHTMLAppletElement")]
		public class HTMLAppletElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAppletElement ();
			public string get_align ();
			public string get_alt ();
			public string get_archive ();
			public string get_code ();
			public string get_code_base ();
			public string get_height ();
			public long get_hspace ();
			public string get_name ();
			public string get_object ();
			public long get_vspace ();
			public string get_width ();
			public void set_align (string value);
			public void set_alt (string value);
			public void set_archive (string value);
			public void set_code (string value);
			public void set_code_base (string value);
			public void set_height (string value);
			public void set_hspace (long value);
			public void set_name (string value);
			public void set_object (string value);
			public void set_vspace (long value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string archive { owned get; set; }
			public string code { owned get; set; }
			public string code_base { owned get; set; }
			public string height { owned get; set; }
			public long hspace { get; set; }
			public string name { owned get; set; }
			public string object { owned get; set; }
			public long vspace { get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_area_element_get_type ()")]
		[GIR (name = "DOMHTMLAreaElement")]
		public class HTMLAreaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAreaElement ();
			public string get_alt ();
			public string get_coords ();
			public string get_hash ();
			public string get_host ();
			public string get_hostname ();
			public string get_href ();
			public bool get_no_href ();
			public string get_pathname ();
			public string get_ping ();
			public string get_port ();
			public string get_protocol ();
			public string get_search ();
			public string get_shape ();
			public string get_target ();
			public void set_alt (string value);
			public void set_coords (string value);
			public void set_href (string value);
			public void set_no_href (bool value);
			public void set_ping (string value);
			public void set_shape (string value);
			public void set_target (string value);
			public string alt { owned get; set; }
			public string coords { owned get; set; }
			public string hash { owned get; }
			public string host { owned get; }
			public string hostname { owned get; }
			public string href { owned get; set; }
			public bool no_href { get; set; }
			public string pathname { owned get; }
			public string ping { owned get; set; }
			public string port { owned get; }
			public string protocol { owned get; }
			public string search { owned get; }
			public string shape { owned get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_audio_element_get_type ()")]
		[GIR (name = "DOMHTMLAudioElement")]
		public class HTMLAudioElement : WebKit.DOM.HTMLMediaElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAudioElement ();
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_htmlbr_element_get_type ()")]
		[GIR (name = "DOMHTMLBRElement")]
		public class HTMLBRElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBRElement ();
			public string get_clear ();
			public void set_clear (string value);
			public string clear { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_base_element_get_type ()")]
		[GIR (name = "DOMHTMLBaseElement")]
		public class HTMLBaseElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBaseElement ();
			public string get_href ();
			public string get_target ();
			public void set_href (string value);
			public void set_target (string value);
			public string href { owned get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_base_font_element_get_type ()")]
		[GIR (name = "DOMHTMLBaseFontElement")]
		public class HTMLBaseFontElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBaseFontElement ();
			public string get_color ();
			public string get_face ();
			public long get_size ();
			public void set_color (string value);
			public void set_face (string value);
			public void set_size (long value);
			public string color { owned get; set; }
			public string face { owned get; set; }
			public long size { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_body_element_get_type ()")]
		[GIR (name = "DOMHTMLBodyElement")]
		public class HTMLBodyElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBodyElement ();
			public string get_a_link ();
			public string get_background ();
			public string get_bg_color ();
			public string get_link ();
			public string get_text ();
			public string get_v_link ();
			public void set_a_link (string value);
			public void set_background (string value);
			public void set_bg_color (string value);
			public void set_link (string value);
			public void set_text (string value);
			public void set_v_link (string value);
			public string a_link { owned get; set; }
			public string background { owned get; set; }
			public string bg_color { owned get; set; }
			public string link { owned get; set; }
			public string text { owned get; set; }
			public string v_link { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_button_element_get_type ()")]
		[GIR (name = "DOMHTMLButtonElement")]
		public class HTMLButtonElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLButtonElement ();
			public bool check_validity ();
			public void click ();
			public bool get_autofocus ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_form_action ();
			public string get_form_enctype ();
			public string get_form_method ();
			public bool get_form_no_validate ();
			public string get_form_target ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public string get_name ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public bool get_will_validate ();
			public void set_autofocus (bool value);
			public void set_custom_validity (string error);
			public void set_disabled (bool value);
			public void set_form_action (string value);
			public void set_form_enctype (string value);
			public void set_form_method (string value);
			public void set_form_no_validate (bool value);
			public void set_form_target (string value);
			public void set_name (string value);
			public void set_value (string value);
			public bool autofocus { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string form_action { owned get; set; }
			public string form_enctype { owned get; set; }
			public string form_method { owned get; set; }
			public bool form_no_validate { get; set; }
			public string form_target { owned get; set; }
			public WebKit.DOM.NodeList labels { get; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_canvas_element_get_type ()")]
		[GIR (name = "DOMHTMLCanvasElement")]
		public class HTMLCanvasElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLCanvasElement ();
			public long get_height ();
			public long get_width ();
			public void set_height (long value);
			public void set_width (long value);
			public long height { get; set; }
			public long width { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_collection_get_type ()")]
		[GIR (name = "DOMHTMLCollection")]
		public class HTMLCollection : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected HTMLCollection ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node named_item (string name);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_htmld_list_element_get_type ()")]
		[GIR (name = "DOMHTMLDListElement")]
		public class HTMLDListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDListElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_details_element_get_type ()")]
		[GIR (name = "DOMHTMLDetailsElement")]
		public class HTMLDetailsElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDetailsElement ();
			public bool get_open ();
			public void set_open (bool value);
			public bool open { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_directory_element_get_type ()")]
		[GIR (name = "DOMHTMLDirectoryElement")]
		public class HTMLDirectoryElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDirectoryElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_div_element_get_type ()")]
		[GIR (name = "DOMHTMLDivElement")]
		public class HTMLDivElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDivElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_document_get_type ()")]
		[GIR (name = "DOMHTMLDocument")]
		public class HTMLDocument : WebKit.DOM.Document, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDocument ();
			public void capture_events ();
			public void clear ();
			public void close ();
			public unowned WebKit.DOM.Element get_active_element ();
			public string get_alink_color ();
			public string get_bg_color ();
			public string get_compat_mode ();
			public string get_design_mode ();
			public string get_dir ();
			public unowned WebKit.DOM.HTMLCollection get_embeds ();
			public string get_fg_color ();
			public string get_link_color ();
			public unowned WebKit.DOM.HTMLCollection get_plugins ();
			public unowned WebKit.DOM.HTMLCollection get_scripts ();
			public string get_vlink_color ();
			public bool has_focus ();
			public void release_events ();
			public void set_alink_color (string value);
			public void set_bg_color (string value);
			public void set_design_mode (string value);
			public void set_dir (string value);
			public void set_fg_color (string value);
			public void set_link_color (string value);
			public void set_vlink_color (string value);
			public WebKit.DOM.Element active_element { get; }
			public string alink_color { owned get; set; }
			public string bg_color { owned get; set; }
			public string compat_mode { owned get; }
			public string design_mode { owned get; set; }
			public string dir { owned get; set; }
			public WebKit.DOM.HTMLCollection embeds { get; }
			public string fg_color { owned get; set; }
			public string link_color { owned get; set; }
			public WebKit.DOM.HTMLCollection plugins { get; }
			public WebKit.DOM.HTMLCollection scripts { get; }
			public string vlink_color { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_element_get_type ()")]
		[GIR (name = "DOMHTMLElement")]
		public class HTMLElement : WebKit.DOM.Element, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLElement ();
			public string get_access_key ();
			public unowned WebKit.DOM.HTMLCollection get_children ();
			public unowned WebKit.DOM.DOMTokenList get_class_list ();
			public string get_class_name ();
			public string get_content_editable ();
			public string get_dir ();
			public bool get_draggable ();
			public bool get_hidden ();
			public string get_id ();
			public string get_inner_html ();
			public string get_inner_text ();
			public bool get_is_content_editable ();
			public string get_item_id ();
			public unowned WebKit.DOM.DOMSettableTokenList get_item_prop ();
			public unowned WebKit.DOM.DOMSettableTokenList get_item_ref ();
			public bool get_item_scope ();
			public unowned WebKit.DOM.DOMSettableTokenList get_item_type ();
			public string get_lang ();
			public string get_outer_html ();
			public string get_outer_text ();
			public bool get_spellcheck ();
			public long get_tab_index ();
			public string get_title ();
			public string get_webkitdropzone ();
			public unowned WebKit.DOM.Element insert_adjacent_element (string where, WebKit.DOM.Element element) throws GLib.Error;
			public void insert_adjacent_html (string where, string html) throws GLib.Error;
			public void insert_adjacent_text (string where, string text) throws GLib.Error;
			public void set_access_key (string value);
			public void set_class_name (string value);
			public void set_content_editable (string value) throws GLib.Error;
			public void set_dir (string value);
			public void set_draggable (bool value);
			public void set_hidden (bool value);
			public void set_id (string value);
			public void set_inner_html (string value) throws GLib.Error;
			public void set_inner_text (string value) throws GLib.Error;
			public void set_item_id (string value);
			public void set_item_scope (bool value);
			public void set_lang (string value);
			public void set_outer_html (string value) throws GLib.Error;
			public void set_outer_text (string value) throws GLib.Error;
			public void set_spellcheck (bool value);
			public void set_tab_index (long value);
			public void set_title (string value);
			public void set_webkitdropzone (string value);
			public string access_key { owned get; set; }
			public WebKit.DOM.HTMLCollection children { get; }
			public WebKit.DOM.DOMTokenList class_list { get; }
			public string class_name { owned get; set; }
			public string content_editable { owned get; set; }
			public string dir { owned get; set; }
			public bool draggable { get; set; }
			public bool hidden { get; set; }
			public string id { owned get; set; }
			public string inner_html { owned get; set; }
			public string inner_text { owned get; set; }
			public bool is_content_editable { get; }
			public string lang { owned get; set; }
			public string outer_html { owned get; set; }
			public string outer_text { owned get; set; }
			public bool spellcheck { get; set; }
			public long tab_index { get; set; }
			public string title { owned get; set; }
			public string webkitdropzone { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_embed_element_get_type ()")]
		[GIR (name = "DOMHTMLEmbedElement")]
		public class HTMLEmbedElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLEmbedElement ();
			public string get_align ();
			public long get_height ();
			public string get_name ();
			public string get_src ();
			public long get_width ();
			public void set_align (string value);
			public void set_height (long value);
			public void set_name (string value);
			public void set_src (string value);
			public void set_width (long value);
			public string align { owned get; set; }
			public long height { get; set; }
			public string name { owned get; set; }
			public string src { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public long width { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_field_set_element_get_type ()")]
		[GIR (name = "DOMHTMLFieldSetElement")]
		public class HTMLFieldSetElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFieldSetElement ();
			public bool check_validity ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public bool get_will_validate ();
			public void set_custom_validity (string error);
			public WebKit.DOM.HTMLFormElement form { get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_font_element_get_type ()")]
		[GIR (name = "DOMHTMLFontElement")]
		public class HTMLFontElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFontElement ();
			public string get_color ();
			public string get_face ();
			public string get_size ();
			public void set_color (string value);
			public void set_face (string value);
			public void set_size (string value);
			public string color { owned get; set; }
			public string face { owned get; set; }
			public string size { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_form_element_get_type ()")]
		[GIR (name = "DOMHTMLFormElement")]
		public class HTMLFormElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFormElement ();
			public bool check_validity ();
			public void dispatch_form_change ();
			public void dispatch_form_input ();
			public string get_accept_charset ();
			public string get_action ();
			public string get_autocomplete ();
			public unowned WebKit.DOM.HTMLCollection get_elements ();
			public string get_encoding ();
			public string get_enctype ();
			public long get_length ();
			public string get_method ();
			public string get_name ();
			public bool get_no_validate ();
			public string get_target ();
			public void reset ();
			public void set_accept_charset (string value);
			public void set_action (string value);
			public void set_autocomplete (string value);
			public void set_encoding (string value);
			public void set_enctype (string value);
			public void set_method (string value);
			public void set_name (string value);
			public void set_no_validate (bool value);
			public void set_target (string value);
			public void submit ();
			public string accept_charset { owned get; set; }
			public string action { owned get; set; }
			public string autocomplete { owned get; set; }
			public WebKit.DOM.HTMLCollection elements { get; }
			public string encoding { owned get; set; }
			public string enctype { owned get; set; }
			public long length { get; }
			public string method { owned get; set; }
			public string name { owned get; set; }
			public bool no_validate { get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_frame_element_get_type ()")]
		[GIR (name = "DOMHTMLFrameElement")]
		public class HTMLFrameElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFrameElement ();
			public unowned WebKit.DOM.Document get_content_document ();
			public unowned WebKit.DOM.DOMWindow get_content_window ();
			public string get_frame_border ();
			public long get_height ();
			public string get_long_desc ();
			public string get_margin_height ();
			public string get_margin_width ();
			public string get_name ();
			public bool get_no_resize ();
			public string get_scrolling ();
			public string get_src ();
			public long get_width ();
			public void set_frame_border (string value);
			public void set_long_desc (string value);
			public void set_margin_height (string value);
			public void set_margin_width (string value);
			public void set_name (string value);
			public void set_no_resize (bool value);
			public void set_scrolling (string value);
			public void set_src (string value);
			public WebKit.DOM.Document content_document { get; }
			public WebKit.DOM.DOMWindow content_window { get; }
			public string frame_border { owned get; set; }
			public long height { get; }
			public string long_desc { owned get; set; }
			public string margin_height { owned get; set; }
			public string margin_width { owned get; set; }
			public string name { owned get; set; }
			public bool no_resize { get; set; }
			public string scrolling { owned get; set; }
			public string src { owned get; set; }
			public long width { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_frame_set_element_get_type ()")]
		[GIR (name = "DOMHTMLFrameSetElement")]
		public class HTMLFrameSetElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFrameSetElement ();
			public string get_cols ();
			public string get_rows ();
			public void set_cols (string value);
			public void set_rows (string value);
			public string cols { owned get; set; }
			public string rows { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_htmlhr_element_get_type ()")]
		[GIR (name = "DOMHTMLHRElement")]
		public class HTMLHRElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHRElement ();
			public string get_align ();
			public bool get_no_shade ();
			public string get_size ();
			public string get_width ();
			public void set_align (string value);
			public void set_no_shade (bool value);
			public void set_size (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public bool no_shade { get; set; }
			public string size { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_head_element_get_type ()")]
		[GIR (name = "DOMHTMLHeadElement")]
		public class HTMLHeadElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHeadElement ();
			public string get_profile ();
			public void set_profile (string value);
			public string profile { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_heading_element_get_type ()")]
		[GIR (name = "DOMHTMLHeadingElement")]
		public class HTMLHeadingElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHeadingElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_html_element_get_type ()")]
		[GIR (name = "DOMHTMLHtmlElement")]
		public class HTMLHtmlElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHtmlElement ();
			public string get_manifest ();
			public string get_version ();
			public void set_manifest (string value);
			public void set_version (string value);
			public string manifest { owned get; set; }
			public string version { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_iframe_element_get_type ()")]
		[GIR (name = "DOMHTMLIFrameElement")]
		public class HTMLIFrameElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLIFrameElement ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_align")]
			public string get_align ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_content_document")]
			public unowned WebKit.DOM.Document get_content_document ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_content_window")]
			public unowned WebKit.DOM.DOMWindow get_content_window ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_frame_border")]
			public string get_frame_border ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_height")]
			public string get_height ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_long_desc")]
			public string get_long_desc ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_margin_height")]
			public string get_margin_height ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_margin_width")]
			public string get_margin_width ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_name")]
			public string get_name ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_sandbox")]
			public string get_sandbox ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_scrolling")]
			public string get_scrolling ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_src")]
			public string get_src ();
			[CCode (cname = "webkit_dom_html_iframe_element_get_width")]
			public string get_width ();
			[CCode (cname = "webkit_dom_html_iframe_element_set_align")]
			public void set_align (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_frame_border")]
			public void set_frame_border (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_height")]
			public void set_height (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_long_desc")]
			public void set_long_desc (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_margin_height")]
			public void set_margin_height (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_margin_width")]
			public void set_margin_width (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_name")]
			public void set_name (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_sandbox")]
			public void set_sandbox (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_scrolling")]
			public void set_scrolling (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_src")]
			public void set_src (string value);
			[CCode (cname = "webkit_dom_html_iframe_element_set_width")]
			public void set_width (string value);
			[NoAccessorMethod]
			public string align { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.Document content_document { owned get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow content_window { owned get; }
			[NoAccessorMethod]
			public string frame_border { owned get; set; }
			[NoAccessorMethod]
			public string height { owned get; set; }
			[NoAccessorMethod]
			public string long_desc { owned get; set; }
			[NoAccessorMethod]
			public string margin_height { owned get; set; }
			[NoAccessorMethod]
			public string margin_width { owned get; set; }
			[NoAccessorMethod]
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string sandbox { owned get; set; }
			[NoAccessorMethod]
			public string scrolling { owned get; set; }
			[NoAccessorMethod]
			public string src { owned get; set; }
			[NoAccessorMethod]
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_image_element_get_type ()")]
		[GIR (name = "DOMHTMLImageElement")]
		public class HTMLImageElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLImageElement ();
			public string get_align ();
			public string get_alt ();
			public string get_border ();
			public bool get_complete ();
			public string get_cross_origin ();
			public long get_height ();
			public long get_hspace ();
			public bool get_is_map ();
			public string get_long_desc ();
			public string get_lowsrc ();
			public string get_name ();
			public long get_natural_height ();
			public long get_natural_width ();
			public string get_src ();
			public string get_use_map ();
			public long get_vspace ();
			public long get_width ();
			public long get_x ();
			public long get_y ();
			public void set_align (string value);
			public void set_alt (string value);
			public void set_border (string value);
			public void set_cross_origin (string value);
			public void set_height (long value);
			public void set_hspace (long value);
			public void set_is_map (bool value);
			public void set_long_desc (string value);
			public void set_lowsrc (string value);
			public void set_name (string value);
			public void set_src (string value);
			public void set_use_map (string value);
			public void set_vspace (long value);
			public void set_width (long value);
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string border { owned get; set; }
			public bool complete { get; }
			public string cross_origin { owned get; set; }
			public long height { get; set; }
			public long hspace { get; set; }
			public bool is_map { get; set; }
			public string long_desc { owned get; set; }
			public string lowsrc { owned get; set; }
			public string name { owned get; set; }
			public long natural_height { get; }
			public long natural_width { get; }
			public string src { owned get; set; }
			public string use_map { owned get; set; }
			public long vspace { get; set; }
			public long width { get; set; }
			public long x { get; }
			public long y { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_input_element_get_type ()")]
		[GIR (name = "DOMHTMLInputElement")]
		public class HTMLInputElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLInputElement ();
			public bool check_validity ();
			public void click ();
			public string get_accept ();
			public string get_align ();
			public string get_alt ();
			public string get_autocomplete ();
			public bool get_autofocus ();
			public bool get_checked ();
			public bool get_default_checked ();
			public string get_default_value ();
			public string get_dir_name ();
			public bool get_disabled ();
			public unowned WebKit.DOM.FileList get_files ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_form_action ();
			public string get_form_enctype ();
			public string get_form_method ();
			public bool get_form_no_validate ();
			public string get_form_target ();
			public bool get_incremental ();
			public bool get_indeterminate ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public unowned WebKit.DOM.HTMLElement get_list ();
			public string get_max ();
			public long get_max_length ();
			public string get_min ();
			public bool get_multiple ();
			public string get_name ();
			public string get_pattern ();
			public string get_placeholder ();
			public bool get_read_only ();
			public bool get_required ();
			public unowned WebKit.DOM.HTMLOptionElement get_selected_option ();
			public ulong get_size ();
			public string get_src ();
			public string get_step ();
			public string get_use_map ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public double get_value_as_number ();
			public bool get_webkit_grammar ();
			public bool get_webkit_speech ();
			public bool get_webkitdirectory ();
			public bool get_will_validate ();
			public bool is_edited ();
			public void select ();
			public void set_accept (string value);
			public void set_align (string value);
			public void set_alt (string value);
			public void set_autocomplete (string value);
			public void set_autofocus (bool value);
			public void set_checked (bool value);
			public void set_custom_validity (string error);
			public void set_default_checked (bool value);
			public void set_default_value (string value);
			public void set_dir_name (string value);
			public void set_disabled (bool value);
			public void set_form_action (string value);
			public void set_form_enctype (string value);
			public void set_form_method (string value);
			public void set_form_no_validate (bool value);
			public void set_form_target (string value);
			public void set_incremental (bool value);
			public void set_indeterminate (bool value);
			public void set_max (string value);
			public void set_max_length (long value) throws GLib.Error;
			public void set_min (string value);
			public void set_multiple (bool value);
			public void set_name (string value);
			public void set_pattern (string value);
			public void set_placeholder (string value);
			public void set_read_only (bool value);
			public void set_required (bool value);
			public void set_size (ulong value);
			public void set_src (string value);
			public void set_step (string value);
			public void set_use_map (string value);
			public void set_value (string value);
			public void set_value_as_number (double value) throws GLib.Error;
			public void set_value_for_user (string value);
			public void set_webkit_grammar (bool value);
			public void set_webkit_speech (bool value);
			public void set_webkitdirectory (bool value);
			public void step_down (long n) throws GLib.Error;
			public void step_up (long n) throws GLib.Error;
			public string accept { owned get; set; }
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string autocomplete { owned get; set; }
			public bool autofocus { get; set; }
			public bool checked { get; set; }
			public bool default_checked { get; set; }
			public string default_value { owned get; set; }
			public string dir_name { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.FileList files { get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string form_action { owned get; set; }
			public string form_enctype { owned get; set; }
			public string form_method { owned get; set; }
			public bool form_no_validate { get; set; }
			public string form_target { owned get; set; }
			public bool incremental { get; set; }
			public bool indeterminate { get; set; }
			public WebKit.DOM.NodeList labels { get; }
			public WebKit.DOM.HTMLElement list { get; }
			public string max { owned get; set; }
			public long max_length { get; set; }
			public string min { owned get; set; }
			public bool multiple { get; set; }
			public string name { owned get; set; }
			public string pattern { owned get; set; }
			public string placeholder { owned get; set; }
			public bool read_only { get; set; }
			public bool required { get; set; }
			public WebKit.DOM.HTMLOptionElement selected_option { get; }
			public ulong size { get; set; }
			public string src { owned get; set; }
			public string step { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string use_map { owned get; set; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public double value_as_number { get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_is_index_element_get_type ()")]
		[GIR (name = "DOMHTMLIsIndexElement")]
		public class HTMLIsIndexElement : WebKit.DOM.HTMLInputElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLIsIndexElement ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_prompt ();
			public void set_prompt (string value);
			public WebKit.DOM.HTMLFormElement form { get; }
			public string prompt { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_keygen_element_get_type ()")]
		[GIR (name = "DOMHTMLKeygenElement")]
		public class HTMLKeygenElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLKeygenElement ();
			public bool check_validity ();
			public bool get_autofocus ();
			public string get_challenge ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_keytype ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public string get_name ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public bool get_will_validate ();
			public void set_autofocus (bool value);
			public void set_challenge (string value);
			public void set_custom_validity (string error);
			public void set_disabled (bool value);
			public void set_keytype (string value);
			public void set_name (string value);
			public bool autofocus { get; set; }
			public string challenge { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string keytype { owned get; set; }
			public WebKit.DOM.NodeList labels { get; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_htmlli_element_get_type ()")]
		[GIR (name = "DOMHTMLLIElement")]
		public class HTMLLIElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLIElement ();
			public long get_value ();
			public void set_value (long value);
			[NoAccessorMethod]
			public string type { owned get; set; }
			public long value { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_label_element_get_type ()")]
		[GIR (name = "DOMHTMLLabelElement")]
		public class HTMLLabelElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLabelElement ();
			public unowned WebKit.DOM.HTMLElement get_control ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_html_for ();
			public void set_html_for (string value);
			public WebKit.DOM.HTMLElement control { get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string html_for { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_legend_element_get_type ()")]
		[GIR (name = "DOMHTMLLegendElement")]
		public class HTMLLegendElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLegendElement ();
			public string get_align ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public void set_align (string value);
			public string align { owned get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_link_element_get_type ()")]
		[GIR (name = "DOMHTMLLinkElement")]
		public class HTMLLinkElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLinkElement ();
			public string get_charset ();
			public bool get_disabled ();
			public string get_href ();
			public string get_hreflang ();
			public string get_media ();
			public string get_rel ();
			public string get_rev ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public string get_target ();
			public void set_charset (string value);
			public void set_disabled (bool value);
			public void set_href (string value);
			public void set_hreflang (string value);
			public void set_media (string value);
			public void set_rel (string value);
			public void set_rev (string value);
			public void set_target (string value);
			public string charset { owned get; set; }
			public bool disabled { get; set; }
			public string href { owned get; set; }
			public string hreflang { owned get; set; }
			public string media { owned get; set; }
			public string rel { owned get; set; }
			public string rev { owned get; set; }
			public WebKit.DOM.StyleSheet sheet { get; }
			public string target { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_map_element_get_type ()")]
		[GIR (name = "DOMHTMLMapElement")]
		public class HTMLMapElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMapElement ();
			public unowned WebKit.DOM.HTMLCollection get_areas ();
			public string get_name ();
			public void set_name (string value);
			public WebKit.DOM.HTMLCollection areas { get; }
			public string name { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_marquee_element_get_type ()")]
		[GIR (name = "DOMHTMLMarqueeElement")]
		public class HTMLMarqueeElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMarqueeElement ();
			public string get_behavior ();
			public string get_bg_color ();
			public string get_direction ();
			public string get_height ();
			public ulong get_hspace ();
			public long get_loop ();
			public long get_scroll_amount ();
			public long get_scroll_delay ();
			public bool get_true_speed ();
			public ulong get_vspace ();
			public string get_width ();
			public void set_behavior (string value);
			public void set_bg_color (string value);
			public void set_direction (string value);
			public void set_height (string value);
			public void set_hspace (ulong value);
			public void set_loop (long value) throws GLib.Error;
			public void set_scroll_amount (long value) throws GLib.Error;
			public void set_scroll_delay (long value) throws GLib.Error;
			public void set_true_speed (bool value);
			public void set_vspace (ulong value);
			public void set_width (string value);
			public void start ();
			public void stop ();
			public string behavior { owned get; set; }
			public string bg_color { owned get; set; }
			public string direction { owned get; set; }
			public string height { owned get; set; }
			public ulong hspace { get; set; }
			public long loop { get; set; }
			public long scroll_amount { get; set; }
			public long scroll_delay { get; set; }
			public bool true_speed { get; set; }
			public ulong vspace { get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_media_element_get_type ()")]
		[GIR (name = "DOMHTMLMediaElement")]
		public class HTMLMediaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMediaElement ();
			public string can_play_type (string type);
			public bool get_autoplay ();
			public unowned WebKit.DOM.TimeRanges get_buffered ();
			public bool get_controls ();
			public string get_current_src ();
			public float get_current_time ();
			public bool get_default_muted ();
			public float get_default_playback_rate ();
			public float get_duration ();
			public bool get_ended ();
			public unowned WebKit.DOM.MediaError get_error ();
			public double get_initial_time ();
			public bool get_loop ();
			public string get_media_group ();
			public bool get_muted ();
			public ushort get_network_state ();
			public bool get_paused ();
			public float get_playback_rate ();
			public unowned WebKit.DOM.TimeRanges get_played ();
			public string get_preload ();
			public ushort get_ready_state ();
			public unowned WebKit.DOM.TimeRanges get_seekable ();
			public bool get_seeking ();
			public string get_src ();
			public float get_start_time ();
			public float get_volume ();
			public ulong get_webkit_audio_decoded_byte_count ();
			public bool get_webkit_closed_captions_visible ();
			public bool get_webkit_has_closed_captions ();
			public bool get_webkit_preserves_pitch ();
			public ulong get_webkit_video_decoded_byte_count ();
			public void load () throws GLib.Error;
			public void pause ();
			public void play ();
			public void set_autoplay (bool value);
			public void set_controls (bool value);
			public void set_current_time (float value) throws GLib.Error;
			public void set_default_muted (bool value);
			public void set_default_playback_rate (float value);
			public void set_loop (bool value);
			public void set_media_group (string value);
			public void set_muted (bool value);
			public void set_playback_rate (float value);
			public void set_preload (string value);
			public void set_src (string value);
			public void set_volume (float value) throws GLib.Error;
			public void set_webkit_closed_captions_visible (bool value);
			public void set_webkit_preserves_pitch (bool value);
			public bool autoplay { get; set; }
			public WebKit.DOM.TimeRanges buffered { get; }
			public bool controls { get; set; }
			public string current_src { owned get; }
			public float current_time { get; set; }
			public bool default_muted { get; set; }
			public float default_playback_rate { get; set; }
			public float duration { get; }
			public bool ended { get; }
			public WebKit.DOM.MediaError error { get; }
			public double initial_time { get; }
			public bool loop { get; set; }
			public string media_group { owned get; set; }
			public bool muted { get; set; }
			public uint network_state { get; }
			public bool paused { get; }
			public float playback_rate { get; set; }
			public WebKit.DOM.TimeRanges played { get; }
			public string preload { owned get; set; }
			public uint ready_state { get; }
			public WebKit.DOM.TimeRanges seekable { get; }
			public bool seeking { get; }
			public string src { owned get; set; }
			public float start_time { get; }
			public float volume { get; set; }
			public bool webkit_closed_captions_visible { get; set; }
			public bool webkit_has_closed_captions { get; }
			public bool webkit_preserves_pitch { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_menu_element_get_type ()")]
		[GIR (name = "DOMHTMLMenuElement")]
		public class HTMLMenuElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMenuElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_meta_element_get_type ()")]
		[GIR (name = "DOMHTMLMetaElement")]
		public class HTMLMetaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMetaElement ();
			public string get_content ();
			public string get_http_equiv ();
			public string get_name ();
			public string get_scheme ();
			public void set_content (string value);
			public void set_http_equiv (string value);
			public void set_name (string value);
			public void set_scheme (string value);
			public string content { owned get; set; }
			public string http_equiv { owned get; set; }
			public string name { owned get; set; }
			public string scheme { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_mod_element_get_type ()")]
		[GIR (name = "DOMHTMLModElement")]
		public class HTMLModElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLModElement ();
			public string get_cite ();
			public string get_date_time ();
			public void set_cite (string value);
			public void set_date_time (string value);
			public string cite { owned get; set; }
			public string date_time { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_htmlo_list_element_get_type ()")]
		[GIR (name = "DOMHTMLOListElement")]
		public class HTMLOListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOListElement ();
			public bool get_compact ();
			public bool get_reversed ();
			public long get_start ();
			public void set_compact (bool value);
			public void set_reversed (bool value);
			public void set_start (long value);
			public bool compact { get; set; }
			public bool reversed { get; set; }
			public long start { get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_object_element_get_type ()")]
		[GIR (name = "DOMHTMLObjectElement")]
		public class HTMLObjectElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLObjectElement ();
			public bool check_validity ();
			public string get_align ();
			public string get_archive ();
			public string get_border ();
			public string get_code ();
			public string get_code_base ();
			public string get_code_type ();
			public unowned WebKit.DOM.Document get_content_document ();
			public string get_data ();
			public bool get_declare ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_height ();
			public long get_hspace ();
			public string get_name ();
			public string get_standby ();
			public string get_use_map ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public long get_vspace ();
			public string get_width ();
			public bool get_will_validate ();
			public void set_align (string value);
			public void set_archive (string value);
			public void set_border (string value);
			public void set_code (string value);
			public void set_code_base (string value);
			public void set_code_type (string value);
			public void set_custom_validity (string error);
			public void set_data (string value);
			public void set_declare (bool value);
			public void set_height (string value);
			public void set_hspace (long value);
			public void set_name (string value);
			public void set_standby (string value);
			public void set_use_map (string value);
			public void set_vspace (long value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string archive { owned get; set; }
			public string border { owned get; set; }
			public string code { owned get; set; }
			public string code_base { owned get; set; }
			public string code_type { owned get; set; }
			public WebKit.DOM.Document content_document { get; }
			public string data { owned get; set; }
			public bool declare { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string height { owned get; set; }
			public long hspace { get; set; }
			public string name { owned get; set; }
			public string standby { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string use_map { owned get; set; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public long vspace { get; set; }
			public string width { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_opt_group_element_get_type ()")]
		[GIR (name = "DOMHTMLOptGroupElement")]
		public class HTMLOptGroupElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOptGroupElement ();
			public bool get_disabled ();
			public string get_label ();
			public void set_disabled (bool value);
			public void set_label (string value);
			public bool disabled { get; set; }
			public string label { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_option_element_get_type ()")]
		[GIR (name = "DOMHTMLOptionElement")]
		public class HTMLOptionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOptionElement ();
			public bool get_default_selected ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public long get_index ();
			public string get_label ();
			public bool get_selected ();
			public string get_text ();
			public string get_value ();
			public void set_default_selected (bool value);
			public void set_disabled (bool value);
			public void set_label (string value);
			public void set_selected (bool value);
			public void set_value (string value);
			public bool default_selected { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public long index { get; }
			public string label { owned get; set; }
			public bool selected { get; set; }
			public string text { owned get; }
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_options_collection_get_type ()")]
		[GIR (name = "DOMHTMLOptionsCollection")]
		public class HTMLOptionsCollection : WebKit.DOM.HTMLCollection {
			[CCode (has_construct_function = false)]
			protected HTMLOptionsCollection ();
			public long get_selected_index ();
			public void set_selected_index (long value);
			public long selected_index { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_paragraph_element_get_type ()")]
		[GIR (name = "DOMHTMLParagraphElement")]
		public class HTMLParagraphElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLParagraphElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_param_element_get_type ()")]
		[GIR (name = "DOMHTMLParamElement")]
		public class HTMLParamElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLParamElement ();
			public string get_name ();
			public string get_value ();
			public string get_value_type ();
			public void set_name (string value);
			public void set_value (string value);
			public void set_value_type (string value);
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string value { owned get; set; }
			public string value_type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_pre_element_get_type ()")]
		[GIR (name = "DOMHTMLPreElement")]
		public class HTMLPreElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLPreElement ();
			public long get_width ();
			public bool get_wrap ();
			public void set_width (long value);
			public void set_wrap (bool value);
			public long width { get; set; }
			public bool wrap { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_quote_element_get_type ()")]
		[GIR (name = "DOMHTMLQuoteElement")]
		public class HTMLQuoteElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLQuoteElement ();
			public string get_cite ();
			public void set_cite (string value);
			public string cite { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_script_element_get_type ()")]
		[GIR (name = "DOMHTMLScriptElement")]
		public class HTMLScriptElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLScriptElement ();
			public bool get_async ();
			public string get_charset ();
			public bool get_defer ();
			public string get_event ();
			public string get_html_for ();
			public string get_src ();
			public string get_text ();
			public void set_async (bool value);
			public void set_charset (string value);
			public void set_defer (bool value);
			public void set_event (string value);
			public void set_html_for (string value);
			public void set_src (string value);
			public void set_text (string value);
			public bool @async { get; set; }
			public string charset { owned get; set; }
			public bool defer { get; set; }
			public string event { owned get; set; }
			public string html_for { owned get; set; }
			public string src { owned get; set; }
			public string text { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_select_element_get_type ()")]
		[GIR (name = "DOMHTMLSelectElement")]
		public class HTMLSelectElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLSelectElement ();
			public void add (WebKit.DOM.HTMLElement element, WebKit.DOM.HTMLElement before) throws GLib.Error;
			public bool check_validity ();
			public bool get_autofocus ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public ulong get_length ();
			public bool get_multiple ();
			public string get_name ();
			public unowned WebKit.DOM.HTMLOptionsCollection get_options ();
			public bool get_required ();
			public long get_selected_index ();
			public long get_size ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public bool get_will_validate ();
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node named_item (string name);
			public void remove (long index);
			public void set_autofocus (bool value);
			public void set_custom_validity (string error);
			public void set_disabled (bool value);
			public void set_length (ulong value) throws GLib.Error;
			public void set_multiple (bool value);
			public void set_name (string value);
			public void set_required (bool value);
			public void set_selected_index (long value);
			public void set_size (long value);
			public void set_value (string value);
			public bool autofocus { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public WebKit.DOM.NodeList labels { get; }
			public ulong length { get; set; }
			public bool multiple { get; set; }
			public string name { owned get; set; }
			public WebKit.DOM.HTMLOptionsCollection options { get; }
			public bool required { get; set; }
			public long selected_index { get; set; }
			public long size { get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_style_element_get_type ()")]
		[GIR (name = "DOMHTMLStyleElement")]
		public class HTMLStyleElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLStyleElement ();
			public bool get_disabled ();
			public string get_media ();
			public bool get_scoped ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public void set_disabled (bool value);
			public void set_media (string value);
			public void set_scoped (bool value);
			public bool disabled { get; set; }
			public string media { owned get; set; }
			public WebKit.DOM.StyleSheet sheet { get; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_table_caption_element_get_type ()")]
		[GIR (name = "DOMHTMLTableCaptionElement")]
		public class HTMLTableCaptionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableCaptionElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_table_cell_element_get_type ()")]
		[GIR (name = "DOMHTMLTableCellElement")]
		public class HTMLTableCellElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableCellElement ();
			public string get_abbr ();
			public string get_align ();
			public string get_axis ();
			public string get_bg_color ();
			public long get_cell_index ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_col_span ();
			public string get_headers ();
			public string get_height ();
			public bool get_no_wrap ();
			public long get_row_span ();
			public string get_scope ();
			public string get_v_align ();
			public string get_width ();
			public void set_abbr (string value);
			public void set_align (string value);
			public void set_axis (string value);
			public void set_bg_color (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_col_span (long value);
			public void set_headers (string value);
			public void set_height (string value);
			public void set_no_wrap (bool value);
			public void set_row_span (long value);
			public void set_scope (string value);
			public void set_v_align (string value);
			public void set_width (string value);
			public string abbr { owned get; set; }
			public string align { owned get; set; }
			public string axis { owned get; set; }
			public string bg_color { owned get; set; }
			public long cell_index { get; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long col_span { get; set; }
			public string headers { owned get; set; }
			public string height { owned get; set; }
			public bool no_wrap { get; set; }
			public long row_span { get; set; }
			public string scope { owned get; set; }
			public string v_align { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_table_col_element_get_type ()")]
		[GIR (name = "DOMHTMLTableColElement")]
		public class HTMLTableColElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableColElement ();
			public string get_align ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_span ();
			public string get_v_align ();
			public string get_width ();
			public void set_align (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_span (long value);
			public void set_v_align (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long span { get; set; }
			public string v_align { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_table_element_get_type ()")]
		[GIR (name = "DOMHTMLTableElement")]
		public class HTMLTableElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableElement ();
			public unowned WebKit.DOM.HTMLElement create_caption ();
			public unowned WebKit.DOM.HTMLElement create_t_foot ();
			public unowned WebKit.DOM.HTMLElement create_t_head ();
			public void delete_caption ();
			public void delete_row (long index) throws GLib.Error;
			public void delete_t_foot ();
			public void delete_t_head ();
			public string get_align ();
			public string get_bg_color ();
			public string get_border ();
			public unowned WebKit.DOM.HTMLTableCaptionElement get_caption ();
			public string get_cell_padding ();
			public string get_cell_spacing ();
			public string get_frame ();
			public unowned WebKit.DOM.HTMLCollection get_rows ();
			public string get_rules ();
			public string get_summary ();
			public unowned WebKit.DOM.HTMLCollection get_t_bodies ();
			public unowned WebKit.DOM.HTMLTableSectionElement get_t_foot ();
			public unowned WebKit.DOM.HTMLTableSectionElement get_t_head ();
			public string get_width ();
			public unowned WebKit.DOM.HTMLElement insert_row (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_bg_color (string value);
			public void set_border (string value);
			public void set_caption (WebKit.DOM.HTMLTableCaptionElement value) throws GLib.Error;
			public void set_cell_padding (string value);
			public void set_cell_spacing (string value);
			public void set_frame (string value);
			public void set_rules (string value);
			public void set_summary (string value);
			public void set_t_foot (WebKit.DOM.HTMLTableSectionElement value) throws GLib.Error;
			public void set_t_head (WebKit.DOM.HTMLTableSectionElement value) throws GLib.Error;
			public void set_width (string value);
			public string align { owned get; set; }
			public string bg_color { owned get; set; }
			public string border { owned get; set; }
			public WebKit.DOM.HTMLTableCaptionElement caption { get; set; }
			public string cell_padding { owned get; set; }
			public string cell_spacing { owned get; set; }
			public string frame { owned get; set; }
			public WebKit.DOM.HTMLCollection rows { get; }
			public string rules { owned get; set; }
			public string summary { owned get; set; }
			public WebKit.DOM.HTMLCollection t_bodies { get; }
			public WebKit.DOM.HTMLTableSectionElement t_foot { get; set; }
			public WebKit.DOM.HTMLTableSectionElement t_head { get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_table_row_element_get_type ()")]
		[GIR (name = "DOMHTMLTableRowElement")]
		public class HTMLTableRowElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableRowElement ();
			public void delete_cell (long index) throws GLib.Error;
			public string get_align ();
			public string get_bg_color ();
			public unowned WebKit.DOM.HTMLCollection get_cells ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_row_index ();
			public long get_section_row_index ();
			public string get_v_align ();
			public unowned WebKit.DOM.HTMLElement insert_cell (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_bg_color (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_v_align (string value);
			public string align { owned get; set; }
			public string bg_color { owned get; set; }
			public WebKit.DOM.HTMLCollection cells { get; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long row_index { get; }
			public long section_row_index { get; }
			public string v_align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_table_section_element_get_type ()")]
		[GIR (name = "DOMHTMLTableSectionElement")]
		public class HTMLTableSectionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableSectionElement ();
			public void delete_row (long index) throws GLib.Error;
			public string get_align ();
			public string get_ch ();
			public string get_ch_off ();
			public unowned WebKit.DOM.HTMLCollection get_rows ();
			public string get_v_align ();
			public unowned WebKit.DOM.HTMLElement insert_row (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_v_align (string value);
			public string align { owned get; set; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public WebKit.DOM.HTMLCollection rows { get; }
			public string v_align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_text_area_element_get_type ()")]
		[GIR (name = "DOMHTMLTextAreaElement")]
		public class HTMLTextAreaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTextAreaElement ();
			public bool check_validity ();
			public bool get_autofocus ();
			public long get_cols ();
			public string get_default_value ();
			public string get_dir_name ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public long get_max_length ();
			public string get_name ();
			public string get_placeholder ();
			public bool get_read_only ();
			public bool get_required ();
			public long get_rows ();
			public string get_selection_direction ();
			public long get_selection_end ();
			public long get_selection_start ();
			public ulong get_text_length ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public bool get_will_validate ();
			public string get_wrap ();
			public bool is_edited ();
			public void select ();
			public void set_autofocus (bool value);
			public void set_cols (long value);
			public void set_custom_validity (string error);
			public void set_default_value (string value);
			public void set_dir_name (string value);
			public void set_disabled (bool value);
			public void set_max_length (long value) throws GLib.Error;
			public void set_name (string value);
			public void set_placeholder (string value);
			public void set_read_only (bool value);
			public void set_required (bool value);
			public void set_rows (long value);
			public void set_selection_direction (string value);
			public void set_selection_end (long value);
			public void set_selection_range (long start, long end, string direction);
			public void set_selection_start (long value);
			public void set_value (string value);
			public void set_wrap (string value);
			public bool autofocus { get; set; }
			public long cols { get; set; }
			public string default_value { owned get; set; }
			public string dir_name { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public WebKit.DOM.NodeList labels { get; }
			public long max_length { get; set; }
			public string name { owned get; set; }
			public string placeholder { owned get; set; }
			public bool read_only { get; set; }
			public bool required { get; set; }
			public long rows { get; set; }
			public string selection_direction { owned get; set; }
			public long selection_end { get; set; }
			public long selection_start { get; set; }
			public ulong text_length { get; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
			public string wrap { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_title_element_get_type ()")]
		[GIR (name = "DOMHTMLTitleElement")]
		public class HTMLTitleElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTitleElement ();
			public string get_text ();
			public void set_text (string value);
			public string text { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_htmlu_list_element_get_type ()")]
		[GIR (name = "DOMHTMLUListElement")]
		public class HTMLUListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLUListElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_html_video_element_get_type ()")]
		[GIR (name = "DOMHTMLVideoElement")]
		public class HTMLVideoElement : WebKit.DOM.HTMLMediaElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLVideoElement ();
			public ulong get_height ();
			public string get_poster ();
			public ulong get_video_height ();
			public ulong get_video_width ();
			public ulong get_webkit_decoded_frame_count ();
			public bool get_webkit_displaying_fullscreen ();
			public ulong get_webkit_dropped_frame_count ();
			public bool get_webkit_supports_fullscreen ();
			public ulong get_width ();
			public void set_height (ulong value);
			public void set_poster (string value);
			public void set_width (ulong value);
			public void webkit_enter_full_screen () throws GLib.Error;
			public void webkit_enter_fullscreen () throws GLib.Error;
			public void webkit_exit_full_screen ();
			public void webkit_exit_fullscreen ();
			public ulong height { get; set; }
			public string poster { owned get; set; }
			public ulong video_height { get; }
			public ulong video_width { get; }
			public bool webkit_displaying_fullscreen { get; }
			public bool webkit_supports_fullscreen { get; }
			public ulong width { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_history_get_type ()")]
		[GIR (name = "DOMHistory")]
		public class History : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected History ();
			public void back ();
			public void forward ();
			public ulong get_length ();
			public void go (long distance);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_location_get_type ()")]
		[GIR (name = "DOMLocation")]
		public class Location : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Location ();
			public string get_origin ();
			public string origin { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_media_error_get_type ()")]
		[GIR (name = "DOMMediaError")]
		public class MediaError : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MediaError ();
			public ushort get_code ();
			public uint code { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_media_list_get_type ()")]
		[GIR (name = "DOMMediaList")]
		public class MediaList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MediaList ();
			public void append_medium (string new_medium) throws GLib.Error;
			public void delete_medium (string old_medium) throws GLib.Error;
			public ulong get_length ();
			public string get_media_text ();
			public string item (ulong index);
			public void set_media_text (string value) throws GLib.Error;
			public ulong length { get; }
			public string media_text { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_media_query_list_get_type ()")]
		[GIR (name = "DOMMediaQueryList")]
		public class MediaQueryList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MediaQueryList ();
			public bool get_matches ();
			public string get_media ();
			public bool matches { get; }
			public string media { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_memory_info_get_type ()")]
		[GIR (name = "DOMMemoryInfo")]
		public class MemoryInfo : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MemoryInfo ();
			public ulong get_js_heap_size_limit ();
			public ulong get_total_js_heap_size ();
			public ulong get_used_js_heap_size ();
			public ulong js_heap_size_limit { get; }
			public ulong total_js_heap_size { get; }
			public ulong used_js_heap_size { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_message_port_get_type ()")]
		[GIR (name = "DOMMessagePort")]
		public class MessagePort : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected MessagePort ();
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_mouse_event_get_type ()")]
		[GIR (name = "DOMMouseEvent")]
		public class MouseEvent : WebKit.DOM.UIEvent {
			[CCode (has_construct_function = false)]
			protected MouseEvent ();
			public bool get_alt_key ();
			public ushort get_button ();
			public long get_client_x ();
			public long get_client_y ();
			public bool get_ctrl_key ();
			public unowned WebKit.DOM.Node get_from_element ();
			public bool get_meta_key ();
			public long get_offset_x ();
			public long get_offset_y ();
			public unowned WebKit.DOM.EventTarget get_related_target ();
			public long get_screen_x ();
			public long get_screen_y ();
			public bool get_shift_key ();
			public unowned WebKit.DOM.Node get_to_element ();
			public long get_webkit_movement_x ();
			public long get_webkit_movement_y ();
			public long get_x ();
			public long get_y ();
			public void init_mouse_event (string type, bool can_bubble, bool cancelable, WebKit.DOM.DOMWindow view, long detail, long screen_x, long screen_y, long client_x, long client_y, bool ctrl_key, bool alt_key, bool shift_key, bool meta_key, ushort button, WebKit.DOM.EventTarget related_target);
			public bool alt_key { get; }
			public uint button { get; }
			public long client_x { get; }
			public long client_y { get; }
			public bool ctrl_key { get; }
			public WebKit.DOM.Node from_element { get; }
			public bool meta_key { get; }
			public long offset_x { get; }
			public long offset_y { get; }
			public WebKit.DOM.EventTarget related_target { get; }
			public long screen_x { get; }
			public long screen_y { get; }
			public bool shift_key { get; }
			public WebKit.DOM.Node to_element { get; }
			public long x { get; }
			public long y { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_named_node_map_get_type ()")]
		[GIR (name = "DOMNamedNodeMap")]
		public class NamedNodeMap : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NamedNodeMap ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node get_named_item (string name);
			public unowned WebKit.DOM.Node get_named_item_ns (string namespace_uri, string local_name);
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node remove_named_item (string name) throws GLib.Error;
			public unowned WebKit.DOM.Node remove_named_item_ns (string namespace_uri, string local_name) throws GLib.Error;
			public unowned WebKit.DOM.Node set_named_item (WebKit.DOM.Node node) throws GLib.Error;
			public unowned WebKit.DOM.Node set_named_item_ns (WebKit.DOM.Node node) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_navigator_get_type ()")]
		[GIR (name = "DOMNavigator")]
		public class Navigator : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Navigator ();
			public string get_app_code_name ();
			public string get_app_name ();
			public string get_app_version ();
			public bool get_cookie_enabled ();
			public string get_language ();
			public unowned WebKit.DOM.DOMMimeTypeArray get_mime_types ();
			public bool get_on_line ();
			public string get_platform ();
			public unowned WebKit.DOM.DOMPluginArray get_plugins ();
			public string get_product ();
			public string get_product_sub ();
			public void get_storage_updates ();
			public string get_user_agent ();
			public string get_vendor ();
			public string get_vendor_sub ();
			public bool java_enabled ();
			public string app_code_name { owned get; }
			public string app_name { owned get; }
			public string app_version { owned get; }
			public bool cookie_enabled { get; }
			public string language { owned get; }
			public WebKit.DOM.DOMMimeTypeArray mime_types { get; }
			public bool on_line { get; }
			public string platform { owned get; }
			public WebKit.DOM.DOMPluginArray plugins { get; }
			public string product { owned get; }
			public string product_sub { owned get; }
			public string user_agent { owned get; }
			public string vendor { owned get; }
			public string vendor_sub { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_node_get_type ()")]
		[GIR (name = "DOMNode")]
		public class Node : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Node ();
			public unowned WebKit.DOM.Node append_child (WebKit.DOM.Node new_child) throws GLib.Error;
			public unowned WebKit.DOM.Node clone_node (bool deep);
			public ushort compare_document_position (WebKit.DOM.Node other);
			public bool contains (WebKit.DOM.Node other);
			public unowned WebKit.DOM.NamedNodeMap get_attributes ();
			public string get_base_uri ();
			public unowned WebKit.DOM.NodeList get_child_nodes ();
			public unowned WebKit.DOM.Node get_first_child ();
			public unowned WebKit.DOM.Node get_last_child ();
			public string get_local_name ();
			public string get_namespace_uri ();
			public unowned WebKit.DOM.Node get_next_sibling ();
			public string get_node_name ();
			public ushort get_node_type ();
			public string get_node_value ();
			public unowned WebKit.DOM.Document get_owner_document ();
			public unowned WebKit.DOM.Element get_parent_element ();
			public unowned WebKit.DOM.Node get_parent_node ();
			public string get_prefix ();
			public unowned WebKit.DOM.Node get_previous_sibling ();
			public string get_text_content ();
			public bool has_attributes ();
			public bool has_child_nodes ();
			public unowned WebKit.DOM.Node insert_before (WebKit.DOM.Node new_child, WebKit.DOM.Node ref_child) throws GLib.Error;
			public bool is_default_namespace (string namespace_uri);
			public bool is_equal_node (WebKit.DOM.Node other);
			public bool is_same_node (WebKit.DOM.Node other);
			public bool is_supported (string feature, string version);
			public string lookup_namespace_uri (string prefix);
			public string lookup_prefix (string namespace_uri);
			public void normalize ();
			public unowned WebKit.DOM.Node remove_child (WebKit.DOM.Node old_child) throws GLib.Error;
			public unowned WebKit.DOM.Node replace_child (WebKit.DOM.Node new_child, WebKit.DOM.Node old_child) throws GLib.Error;
			public void set_node_value (string value) throws GLib.Error;
			public void set_prefix (string value) throws GLib.Error;
			public void set_text_content (string value) throws GLib.Error;
			public WebKit.DOM.NamedNodeMap attributes { get; }
			public string base_uri { owned get; }
			public WebKit.DOM.NodeList child_nodes { get; }
			public WebKit.DOM.Node first_child { get; }
			public WebKit.DOM.Node last_child { get; }
			public string local_name { owned get; }
			public string namespace_uri { owned get; }
			public WebKit.DOM.Node next_sibling { get; }
			public string node_name { owned get; }
			public uint node_type { get; }
			public string node_value { owned get; set; }
			public WebKit.DOM.Document owner_document { get; }
			public WebKit.DOM.Element parent_element { get; }
			public WebKit.DOM.Node parent_node { get; }
			public string prefix { owned get; set; }
			public WebKit.DOM.Node previous_sibling { get; }
			public string text_content { owned get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_node_filter_get_type ()")]
		[GIR (name = "DOMNodeFilter")]
		public class NodeFilter : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeFilter ();
			public short accept_node (WebKit.DOM.Node n);
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_node_iterator_get_type ()")]
		[GIR (name = "DOMNodeIterator")]
		public class NodeIterator : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeIterator ();
			public void detach ();
			public bool get_expand_entity_references ();
			public unowned WebKit.DOM.NodeFilter get_filter ();
			public bool get_pointer_before_reference_node ();
			public unowned WebKit.DOM.Node get_reference_node ();
			public unowned WebKit.DOM.Node get_root ();
			public ulong get_what_to_show ();
			public unowned WebKit.DOM.Node next_node () throws GLib.Error;
			public unowned WebKit.DOM.Node previous_node () throws GLib.Error;
			public bool expand_entity_references { get; }
			public WebKit.DOM.NodeFilter filter { get; }
			public bool pointer_before_reference_node { get; }
			public WebKit.DOM.Node reference_node { get; }
			public WebKit.DOM.Node root { get; }
			public ulong what_to_show { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_node_list_get_type ()")]
		[GIR (name = "DOMNodeList")]
		public class NodeList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeList ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_object_get_type ()")]
		[GIR (name = "DOMObject")]
		public class Object : GLib.Object {
			public void* coreObject;
			[CCode (has_construct_function = false)]
			protected Object ();
			public void* core_object { construct; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_processing_instruction_get_type ()")]
		[GIR (name = "DOMProcessingInstruction")]
		public class ProcessingInstruction : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected ProcessingInstruction ();
			public string get_data ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public string get_target ();
			public void set_data (string value) throws GLib.Error;
			public string data { owned get; set; }
			public WebKit.DOM.StyleSheet sheet { get; }
			public string target { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_range_get_type ()")]
		[GIR (name = "DOMRange")]
		public class Range : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Range ();
			public unowned WebKit.DOM.DocumentFragment clone_contents () throws GLib.Error;
			public unowned WebKit.DOM.Range clone_range () throws GLib.Error;
			public void collapse (bool to_start) throws GLib.Error;
			public short compare_boundary_points (ushort how, WebKit.DOM.Range source_range) throws GLib.Error;
			public short compare_node (WebKit.DOM.Node ref_node) throws GLib.Error;
			public short compare_point (WebKit.DOM.Node ref_node, long offset) throws GLib.Error;
			public unowned WebKit.DOM.DocumentFragment create_contextual_fragment (string html) throws GLib.Error;
			public void delete_contents () throws GLib.Error;
			public void detach () throws GLib.Error;
			public void expand (string unit) throws GLib.Error;
			public unowned WebKit.DOM.DocumentFragment extract_contents () throws GLib.Error;
			public bool get_collapsed () throws GLib.Error;
			public unowned WebKit.DOM.Node get_common_ancestor_container () throws GLib.Error;
			public unowned WebKit.DOM.Node get_end_container () throws GLib.Error;
			public long get_end_offset () throws GLib.Error;
			public unowned WebKit.DOM.Node get_start_container () throws GLib.Error;
			public long get_start_offset () throws GLib.Error;
			public string get_text ();
			public void insert_node (WebKit.DOM.Node new_node) throws GLib.Error;
			public bool intersects_node (WebKit.DOM.Node ref_node) throws GLib.Error;
			public bool is_point_in_range (WebKit.DOM.Node ref_node, long offset) throws GLib.Error;
			public void select_node (WebKit.DOM.Node ref_node) throws GLib.Error;
			public void select_node_contents (WebKit.DOM.Node ref_node) throws GLib.Error;
			public void set_end (WebKit.DOM.Node ref_node, long offset) throws GLib.Error;
			public void set_end_after (WebKit.DOM.Node ref_node) throws GLib.Error;
			public void set_end_before (WebKit.DOM.Node ref_node) throws GLib.Error;
			public void set_start (WebKit.DOM.Node ref_node, long offset) throws GLib.Error;
			public void set_start_after (WebKit.DOM.Node ref_node) throws GLib.Error;
			public void set_start_before (WebKit.DOM.Node ref_node) throws GLib.Error;
			public void surround_contents (WebKit.DOM.Node new_parent) throws GLib.Error;
			public string to_string () throws GLib.Error;
			public bool collapsed { get; }
			public WebKit.DOM.Node common_ancestor_container { get; }
			public WebKit.DOM.Node end_container { get; }
			public long end_offset { get; }
			public WebKit.DOM.Node start_container { get; }
			public long start_offset { get; }
			public string text { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_screen_get_type ()")]
		[GIR (name = "DOMScreen")]
		public class Screen : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Screen ();
			public ulong get_avail_height ();
			public long get_avail_left ();
			public long get_avail_top ();
			public ulong get_avail_width ();
			public ulong get_color_depth ();
			public ulong get_height ();
			public ulong get_pixel_depth ();
			public ulong get_width ();
			public ulong avail_height { get; }
			public long avail_left { get; }
			public long avail_top { get; }
			public ulong avail_width { get; }
			public ulong color_depth { get; }
			public ulong height { get; }
			public ulong pixel_depth { get; }
			public ulong width { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_storage_get_type ()")]
		[GIR (name = "DOMStorage")]
		public class Storage : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Storage ();
			public void clear ();
			public string get_item (string key);
			public ulong get_length ();
			public string key (ulong index);
			public void remove_item (string key);
			public void set_item (string key, string data) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_style_media_get_type ()")]
		[GIR (name = "DOMStyleMedia")]
		public class StyleMedia : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleMedia ();
			public bool match_medium (string mediaquery);
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_style_sheet_get_type ()")]
		[GIR (name = "DOMStyleSheet")]
		public class StyleSheet : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleSheet ();
			public bool get_disabled ();
			public string get_href ();
			public unowned WebKit.DOM.MediaList get_media ();
			public unowned WebKit.DOM.Node get_owner_node ();
			public unowned WebKit.DOM.StyleSheet get_parent_style_sheet ();
			public string get_title ();
			public void set_disabled (bool value);
			public bool disabled { get; set; }
			public string href { owned get; }
			public WebKit.DOM.MediaList media { get; }
			public WebKit.DOM.Node owner_node { get; }
			public WebKit.DOM.StyleSheet parent_style_sheet { get; }
			public string title { owned get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_style_sheet_list_get_type ()")]
		[GIR (name = "DOMStyleSheetList")]
		public class StyleSheetList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleSheetList ();
			public ulong get_length ();
			public unowned WebKit.DOM.StyleSheet item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_text_get_type ()")]
		[GIR (name = "DOMText")]
		public class Text : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Text ();
			public string get_whole_text ();
			public unowned WebKit.DOM.Text replace_whole_text (string content) throws GLib.Error;
			public unowned WebKit.DOM.Text split_text (ulong offset) throws GLib.Error;
			public string whole_text { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_time_ranges_get_type ()")]
		[GIR (name = "DOMTimeRanges")]
		public class TimeRanges : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected TimeRanges ();
			public float end (ulong index) throws GLib.Error;
			public ulong get_length ();
			public float start (ulong index) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_tree_walker_get_type ()")]
		[GIR (name = "DOMTreeWalker")]
		public class TreeWalker : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected TreeWalker ();
			public unowned WebKit.DOM.Node first_child ();
			public unowned WebKit.DOM.Node get_current_node ();
			public bool get_expand_entity_references ();
			public unowned WebKit.DOM.NodeFilter get_filter ();
			public unowned WebKit.DOM.Node get_root ();
			public ulong get_what_to_show ();
			public unowned WebKit.DOM.Node last_child ();
			public unowned WebKit.DOM.Node next_node ();
			public unowned WebKit.DOM.Node next_sibling ();
			public unowned WebKit.DOM.Node parent_node ();
			public unowned WebKit.DOM.Node previous_node ();
			public unowned WebKit.DOM.Node previous_sibling ();
			public void set_current_node (WebKit.DOM.Node value) throws GLib.Error;
			public WebKit.DOM.Node current_node { get; set; }
			public bool expand_entity_references { get; }
			public WebKit.DOM.NodeFilter filter { get; }
			public WebKit.DOM.Node root { get; }
			public ulong what_to_show { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_ui_event_get_type ()")]
		[GIR (name = "DOMUIEvent")]
		public class UIEvent : WebKit.DOM.Event {
			[CCode (has_construct_function = false)]
			protected UIEvent ();
			public long get_char_code ();
			public long get_detail ();
			public long get_key_code ();
			public long get_layer_x ();
			public long get_layer_y ();
			public long get_page_x ();
			public long get_page_y ();
			public unowned WebKit.DOM.DOMWindow get_view ();
			public long get_which ();
			public void init_ui_event (string type, bool can_bubble, bool cancelable, WebKit.DOM.DOMWindow view, long detail);
			public long char_code { get; }
			public long detail { get; }
			public long key_code { get; }
			public long layer_x { get; }
			public long layer_y { get; }
			public long page_x { get; }
			public long page_y { get; }
			public WebKit.DOM.DOMWindow view { get; }
			public long which { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_validity_state_get_type ()")]
		[GIR (name = "DOMValidityState")]
		public class ValidityState : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected ValidityState ();
			public bool get_custom_error ();
			public bool get_pattern_mismatch ();
			public bool get_range_overflow ();
			public bool get_range_underflow ();
			public bool get_step_mismatch ();
			public bool get_too_long ();
			public bool get_type_mismatch ();
			public bool get_valid ();
			public bool get_value_missing ();
			public bool custom_error { get; }
			public bool pattern_mismatch { get; }
			public bool range_overflow { get; }
			public bool range_underflow { get; }
			public bool step_mismatch { get; }
			public bool too_long { get; }
			public bool type_mismatch { get; }
			public bool valid { get; }
			public bool value_missing { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_webkit_animation_get_type ()")]
		[GIR (name = "DOMWebKitAnimation")]
		public class WebKitAnimation : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected WebKitAnimation ();
			[CCode (cname = "webkit_dom_webkit_animation_get_delay")]
			public double get_delay ();
			[CCode (cname = "webkit_dom_webkit_animation_get_direction")]
			public ushort get_direction ();
			[CCode (cname = "webkit_dom_webkit_animation_get_duration")]
			public double get_duration ();
			[CCode (cname = "webkit_dom_webkit_animation_get_elapsed_time")]
			public double get_elapsed_time ();
			[CCode (cname = "webkit_dom_webkit_animation_get_ended")]
			public bool get_ended ();
			[CCode (cname = "webkit_dom_webkit_animation_get_fill_mode")]
			public ushort get_fill_mode ();
			[CCode (cname = "webkit_dom_webkit_animation_get_name")]
			public string get_name ();
			[CCode (cname = "webkit_dom_webkit_animation_get_paused")]
			public bool get_paused ();
			[CCode (cname = "webkit_dom_webkit_animation_pause")]
			public void pause ();
			[CCode (cname = "webkit_dom_webkit_animation_play")]
			public void play ();
			[CCode (cname = "webkit_dom_webkit_animation_set_elapsed_time")]
			public void set_elapsed_time (double value);
			[NoAccessorMethod]
			public double delay { get; }
			[NoAccessorMethod]
			public uint direction { get; }
			[NoAccessorMethod]
			public double duration { get; }
			[NoAccessorMethod]
			public double elapsed_time { get; set; }
			[NoAccessorMethod]
			public bool ended { get; }
			[NoAccessorMethod]
			public uint fill_mode { get; }
			[NoAccessorMethod]
			public int iteration_count { get; }
			[NoAccessorMethod]
			public string name { owned get; }
			[NoAccessorMethod]
			public bool paused { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_webkit_animation_list_get_type ()")]
		[GIR (name = "DOMWebKitAnimationList")]
		public class WebKitAnimationList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected WebKitAnimationList ();
			[CCode (cname = "webkit_dom_webkit_animation_list_get_length")]
			public ulong get_length ();
			[CCode (cname = "webkit_dom_webkit_animation_list_item")]
			public unowned WebKit.DOM.WebKitAnimation item (ulong index);
			[NoAccessorMethod]
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_webkit_named_flow_get_type ()")]
		[GIR (name = "DOMWebKitNamedFlow")]
		public class WebKitNamedFlow : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected WebKitNamedFlow ();
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_webkit_point_get_type ()")]
		[GIR (name = "DOMWebKitPoint")]
		public class WebKitPoint : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected WebKitPoint ();
			[CCode (cname = "webkit_dom_webkit_point_get_x")]
			public float get_x ();
			[CCode (cname = "webkit_dom_webkit_point_get_y")]
			public float get_y ();
			[CCode (cname = "webkit_dom_webkit_point_set_x")]
			public void set_x (float value);
			[CCode (cname = "webkit_dom_webkit_point_set_y")]
			public void set_y (float value);
			[NoAccessorMethod]
			public float x { get; set; }
			[NoAccessorMethod]
			public float y { get; set; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_xpath_expression_get_type ()")]
		[GIR (name = "DOMXPathExpression")]
		public class XPathExpression : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathExpression ();
			public unowned WebKit.DOM.XPathResult evaluate (WebKit.DOM.Node context_node, ushort type, WebKit.DOM.XPathResult in_result) throws GLib.Error;
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_xpath_ns_resolver_get_type ()")]
		[GIR (name = "DOMXPathNSResolver")]
		public class XPathNSResolver : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathNSResolver ();
			public string lookup_namespace_uri (string prefix);
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_xpath_result_get_type ()")]
		[GIR (name = "DOMXPathResult")]
		public class XPathResult : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathResult ();
			public bool get_boolean_value () throws GLib.Error;
			public bool get_invalid_iterator_state ();
			public double get_number_value () throws GLib.Error;
			public ushort get_result_type ();
			public unowned WebKit.DOM.Node get_single_node_value () throws GLib.Error;
			public ulong get_snapshot_length () throws GLib.Error;
			public string get_string_value () throws GLib.Error;
			public unowned WebKit.DOM.Node iterate_next () throws GLib.Error;
			public unowned WebKit.DOM.Node snapshot_item (ulong index) throws GLib.Error;
			public bool boolean_value { get; }
			public bool invalid_iterator_state { get; }
			public double number_value { get; }
			public uint result_type { get; }
			public WebKit.DOM.Node single_node_value { get; }
			public ulong snapshot_length { get; }
			public string string_value { owned get; }
		}
		[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_dom_event_target_get_type ()")]
		[GIR (name = "DOMEventTarget")]
		public interface EventTarget : GLib.Object {
		    public abstract bool add_event_listener (string eventName, GLib.Callback handler, bool bubble, void* userData);
		    public abstract void dispatch_event (WebKit.DOM.Event event) throws GLib.Error;
		    public abstract bool remove_event_listener (string eventName, GLib.Callback handler, bool bubble);
		}
	}
	namespace Version {
		[CCode (cheader_filename = "webkit/webkit.h", cname = "WEBKIT_MAJOR_VERSION")]
		public const int MAJOR;
		[CCode (cheader_filename = "webkit/webkit.h", cname = "WEBKIT_MICRO_VERSION")]
		public const int MICRO;
		[CCode (cheader_filename = "webkit/webkit.h", cname = "WEBKIT_MINOR_VERSION")]
		public const int MINOR;
		[CCode (cheader_filename = "webkit/webkit.h", cname = "WEBKIT_USER_AGENT_MAJOR_VERSION")]
		public const int USER_AGENT_MAJOR;
		[CCode (cheader_filename = "webkit/webkit.h", cname = "WEBKIT_USER_AGENT_MINOR_VERSION")]
		public const int USER_AGENT_MINOR;
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_download_get_type ()")]
	public class Download : GLib.Object {
		[CCode (has_construct_function = false)]
		public Download (WebKit.NetworkRequest request);
		public void cancel ();
		public uint64 get_current_size ();
		public unowned string get_destination_uri ();
		public double get_elapsed_time ();
		public unowned WebKit.NetworkRequest get_network_request ();
		public unowned WebKit.NetworkResponse get_network_response ();
		public double get_progress ();
		public WebKit.DownloadStatus get_status ();
		public unowned string get_suggested_filename ();
		public uint64 get_total_size ();
		public unowned string get_uri ();
		public void set_destination_uri (string destination_uri);
		public void start ();
		public uint64 current_size { get; }
		public string destination_uri { get; set; }
		public WebKit.NetworkRequest network_request { get; construct; }
		public WebKit.NetworkResponse network_response { get; construct; }
		public double progress { get; }
		public WebKit.DownloadStatus status { get; }
		public string suggested_filename { get; }
		public uint64 total_size { get; }
		public signal bool error (int error_code, int error_detail, string reason);
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_geolocation_policy_decision_get_type ()")]
	public class GeolocationPolicyDecision : GLib.Object {
		[CCode (has_construct_function = false)]
		protected GeolocationPolicyDecision ();
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_hit_test_result_get_type ()")]
	public class HitTestResult : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HitTestResult ();
		[NoAccessorMethod]
		public WebKit.HitTestResultContext context { get; construct; }
		[NoAccessorMethod]
		public string image_uri { owned get; construct; }
		[NoAccessorMethod]
		public WebKit.DOM.Node inner_node { owned get; construct; }
		[NoAccessorMethod]
		public string link_uri { owned get; construct; }
		[NoAccessorMethod]
		public string media_uri { owned get; construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_icon_database_get_type ()")]
	public class IconDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected IconDatabase ();
		public void clear ();
		public Gdk.Pixbuf get_icon_pixbuf (string page_uri);
		public string get_icon_uri (string page_uri);
		public unowned string get_path ();
		public void set_path (string path);
		public string path { get; set; }
		public signal void icon_loaded (WebKit.WebFrame frame, string frame_uri);
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_network_request_get_type ()")]
	public class NetworkRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		public NetworkRequest (string uri);
		public unowned Soup.Message get_message ();
		public unowned string get_uri ();
		public void set_uri (string uri);
		public Soup.Message message { get; construct; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_network_response_get_type ()")]
	public class NetworkResponse : GLib.Object {
		[CCode (has_construct_function = false)]
		public NetworkResponse (string uri);
		public unowned Soup.Message get_message ();
		public unowned string get_uri ();
		public void set_uri (string uri);
		public Soup.Message message { get; construct; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_security_origin_get_type ()")]
	public class SecurityOrigin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SecurityOrigin ();
		public GLib.List<weak WebKit.WebDatabase> get_all_web_databases ();
		public unowned string get_host ();
		public uint get_port ();
		public unowned string get_protocol ();
		public uint64 get_web_database_quota ();
		public uint64 get_web_database_usage ();
		public void set_web_database_quota (uint64 quota);
		public string host { get; }
		public uint port { get; }
		public string protocol { get; }
		public uint64 web_database_quota { get; set; }
		public uint64 web_database_usage { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_soup_auth_dialog_get_type ()")]
	public class SoupAuthDialog : GLib.Object, Soup.SessionFeature {
		[CCode (has_construct_function = false)]
		protected SoupAuthDialog ();
		public signal unowned Gtk.Widget current_toplevel (Soup.Message message);
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_viewport_attributes_get_type ()")]
	public class ViewportAttributes : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ViewportAttributes ();
		public void recompute ();
		[NoAccessorMethod]
		public int available_height { get; set; }
		[NoAccessorMethod]
		public int available_width { get; set; }
		[NoAccessorMethod]
		public int desktop_width { get; set; }
		[NoAccessorMethod]
		public int device_dpi { get; set; }
		[NoAccessorMethod]
		public int device_height { get; set; }
		[NoAccessorMethod]
		public float device_pixel_ratio { get; }
		[NoAccessorMethod]
		public int device_width { get; set; }
		[NoAccessorMethod]
		public int height { get; }
		[NoAccessorMethod]
		public float initial_scale_factor { get; }
		[NoAccessorMethod]
		public float maximum_scale_factor { get; }
		[NoAccessorMethod]
		public float minimum_scale_factor { get; }
		[NoAccessorMethod]
		public bool user_scalable { get; }
		[NoAccessorMethod]
		public bool valid { get; }
		[NoAccessorMethod]
		public int width { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_back_forward_list_get_type ()")]
	public class WebBackForwardList : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebBackForwardList ();
		public void add_item (WebKit.WebHistoryItem history_item);
		public void clear ();
		public bool contains_item (WebKit.WebHistoryItem history_item);
		public unowned WebKit.WebHistoryItem get_back_item ();
		public int get_back_length ();
		public GLib.List<weak WebKit.WebHistoryItem> get_back_list_with_limit (int limit);
		public unowned WebKit.WebHistoryItem get_current_item ();
		public unowned WebKit.WebHistoryItem get_forward_item ();
		public int get_forward_length ();
		public GLib.List<weak WebKit.WebHistoryItem> get_forward_list_with_limit (int limit);
		public int get_limit ();
		public unowned WebKit.WebHistoryItem get_nth_item (int index);
		public void go_back ();
		public void go_forward ();
		public void go_to_item (WebKit.WebHistoryItem history_item);
		public void set_limit (int limit);
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_data_source_get_type ()")]
	public class WebDataSource : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebDataSource ();
		public unowned GLib.StringBuilder get_data ();
		public unowned string get_encoding ();
		public unowned WebKit.NetworkRequest get_initial_request ();
		public unowned WebKit.WebResource get_main_resource ();
		public unowned WebKit.NetworkRequest get_request ();
		public GLib.List<weak WebKit.WebResource> get_subresources ();
		public unowned string get_unreachable_uri ();
		public unowned WebKit.WebFrame get_web_frame ();
		public bool is_loading ();
		[CCode (has_construct_function = false)]
		public WebDataSource.with_request (WebKit.NetworkRequest request);
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_database_get_type ()")]
	public class WebDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebDatabase ();
		public unowned string get_display_name ();
		public uint64 get_expected_size ();
		public unowned string get_filename ();
		public unowned string get_name ();
		public unowned WebKit.SecurityOrigin get_security_origin ();
		public uint64 get_size ();
		public void remove ();
		public string display_name { get; }
		public uint64 expected_size { get; }
		public string filename { get; }
		public string name { get; construct; }
		public WebKit.SecurityOrigin security_origin { get; construct; }
		public uint64 size { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_frame_get_type ()")]
	public class WebFrame : GLib.Object {
		[CCode (has_construct_function = false)]
		[Deprecated (since = "1.0.2")]
		public WebFrame (WebKit.WebView web_view);
		public unowned WebKit.WebFrame find_frame (string name);
		public unowned WebKit.WebDataSource get_data_source ();
		public Gtk.PolicyType get_horizontal_scrollbar_policy ();
		public WebKit.LoadStatus get_load_status ();
		public unowned string get_name ();
		public WebKit.NetworkResponse get_network_response ();
		public unowned WebKit.WebFrame get_parent ();
		public unowned WebKit.WebDataSource get_provisional_data_source ();
		public unowned WebKit.SecurityOrigin get_security_origin ();
		public unowned string get_title ();
		public unowned string get_uri ();
		public Gtk.PolicyType get_vertical_scrollbar_policy ();
		public unowned WebKit.WebView get_web_view ();
		public void load_alternate_string (string content, string base_url, string unreachable_url);
		public void load_request (WebKit.NetworkRequest request);
		public void load_string (string content, string mime_type, string encoding, string base_uri);
		public void load_uri (string uri);
		public void print ();
		public Gtk.PrintOperationResult print_full (Gtk.PrintOperation operation, Gtk.PrintOperationAction action) throws GLib.Error;
		public void reload ();
		public void replace_selection (string text);
		public void stop_loading ();
		public Gtk.PolicyType horizontal_scrollbar_policy { get; }
		public WebKit.LoadStatus load_status { get; }
		public string name { get; }
		public string title { get; }
		public string uri { get; }
		public Gtk.PolicyType vertical_scrollbar_policy { get; }
		public signal void cleared ();
		public signal void hovering_over_link (string object, string p0);
		public signal void load_committed ();
		public signal void load_done (bool deprecated);
		public signal bool scrollbars_policy_changed ();
		[Deprecated (since = "1.1.18")]
		public signal void title_changed (string title);
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_history_item_get_type ()")]
	public class WebHistoryItem : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebHistoryItem ();
		public WebKit.WebHistoryItem copy ();
		public unowned string get_alternate_title ();
		public double get_last_visited_time ();
		public unowned string get_original_uri ();
		public unowned string get_title ();
		public unowned string get_uri ();
		public void set_alternate_title (string title);
		[CCode (has_construct_function = false)]
		public WebHistoryItem.with_data (string uri, string title);
		public string alternate_title { get; set; }
		public double last_visited_time { get; }
		public string original_uri { get; }
		public string title { get; }
		public string uri { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_inspector_get_type ()")]
	public class WebInspector : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebInspector ();
		public void close ();
		public unowned string get_inspected_uri ();
		public unowned WebKit.WebView get_web_view ();
		public void inspect_coordinates (double x, double y);
		public void inspect_node (WebKit.DOM.Node node);
		public void show ();
		public string inspected_uri { get; }
		[NoAccessorMethod]
		public bool javascript_profiling_enabled { get; set; }
		[NoAccessorMethod]
		public bool timeline_profiling_enabled { get; set; }
		public WebKit.WebView web_view { get; }
		public signal bool attach_window ();
		public signal bool close_window ();
		public signal bool detach_window ();
		public signal void finished ();
		public signal unowned WebKit.WebView inspect_web_view (WebKit.WebView web_view);
		public signal bool show_window ();
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_navigation_action_get_type ()")]
	public class WebNavigationAction : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebNavigationAction ();
		public int get_button ();
		public int get_modifier_state ();
		public unowned string get_original_uri ();
		public WebKit.WebNavigationReason get_reason ();
		public unowned string get_target_frame ();
		public void set_original_uri (string originalUri);
		public void set_reason (WebKit.WebNavigationReason reason);
		public int button { get; construct; }
		public int modifier_state { get; construct; }
		public string original_uri { get; set construct; }
		public WebKit.WebNavigationReason reason { get; set construct; }
		public string target_frame { get; construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_plugin_get_type ()")]
	public class WebPlugin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPlugin ();
		public unowned string get_description ();
		public bool get_enabled ();
		public unowned string get_name ();
		public unowned string get_path ();
		public void set_enabled (bool enabled);
		public bool enabled { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_plugin_database_get_type ()")]
	public class WebPluginDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPluginDatabase ();
		public WebKit.WebPlugin get_plugin_for_mimetype (string mime_type);
		public GLib.SList<WebKit.WebPlugin> get_plugins ();
		public void refresh ();
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_policy_decision_get_type ()")]
	public class WebPolicyDecision : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPolicyDecision ();
		public void download ();
		public void ignore ();
		public void use ();
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_resource_get_type ()")]
	public class WebResource : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebResource (string data, ssize_t size, string uri, string mime_type, string encoding, string frame_name);
		public unowned GLib.StringBuilder get_data ();
		public unowned string get_encoding ();
		public unowned string get_frame_name ();
		public unowned string get_mime_type ();
		public unowned string get_uri ();
		public string encoding { get; }
		public string frame_name { get; }
		public string mime_type { get; }
		public string uri { get; construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_settings_get_type ()")]
	public class WebSettings : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebSettings ();
		public WebKit.WebSettings copy ();
		public unowned string get_user_agent ();
		[NoAccessorMethod]
		public bool auto_load_images { get; set construct; }
		[NoAccessorMethod]
		public bool auto_resize_window { get; set construct; }
		[NoAccessorMethod]
		public bool auto_shrink_images { get; set construct; }
		[NoAccessorMethod]
		public string cursive_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string default_encoding { owned get; set construct; }
		[NoAccessorMethod]
		public string default_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public int default_font_size { get; set construct; }
		[NoAccessorMethod]
		public int default_monospace_font_size { get; set construct; }
		[NoAccessorMethod]
		public WebKit.EditingBehavior editing_behavior { get; set construct; }
		[NoAccessorMethod]
		public bool enable_caret_browsing { get; set construct; }
		[NoAccessorMethod]
		public bool enable_default_context_menu { get; set construct; }
		[NoAccessorMethod]
		public bool enable_developer_extras { get; set construct; }
		[NoAccessorMethod]
		public bool enable_dns_prefetching { get; set construct; }
		[NoAccessorMethod]
		public bool enable_dom_paste { get; set construct; }
		[NoAccessorMethod]
		public bool enable_file_access_from_file_uris { get; set construct; }
		[NoAccessorMethod]
		public bool enable_frame_flattening { get; set construct; }
		[NoAccessorMethod]
		public bool enable_fullscreen { get; set construct; }
		[NoAccessorMethod]
		public bool enable_html5_database { get; set construct; }
		[NoAccessorMethod]
		public bool enable_html5_local_storage { get; set construct; }
		[NoAccessorMethod]
		public bool enable_hyperlink_auditing { get; set construct; }
		[NoAccessorMethod]
		public bool enable_java_applet { get; set construct; }
		[NoAccessorMethod]
		public bool enable_offline_web_application_cache { get; set construct; }
		[NoAccessorMethod]
		public bool enable_page_cache { get; set construct; }
		[NoAccessorMethod]
		public bool enable_plugins { get; set construct; }
		[NoAccessorMethod]
		public bool enable_private_browsing { get; set construct; }
		[NoAccessorMethod]
		public bool enable_scripts { get; set construct; }
		[NoAccessorMethod]
		public bool enable_site_specific_quirks { get; set construct; }
		[NoAccessorMethod]
		public bool enable_spatial_navigation { get; set construct; }
		[NoAccessorMethod]
		public bool enable_spell_checking { get; set construct; }
		[NoAccessorMethod]
		public bool enable_universal_access_from_file_uris { get; set construct; }
		[NoAccessorMethod]
		public bool enable_webaudio { get; set construct; }
		[NoAccessorMethod]
		public bool enable_webgl { get; set construct; }
		[NoAccessorMethod]
		public bool enable_xss_auditor { get; set construct; }
		[NoAccessorMethod]
		public bool enforce_96_dpi { get; set construct; }
		[NoAccessorMethod]
		public string fantasy_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string html5_local_storage_database_path { owned get; set construct; }
		[NoAccessorMethod]
		public bool javascript_can_access_clipboard { get; set construct; }
		[NoAccessorMethod]
		public bool javascript_can_open_windows_automatically { get; set construct; }
		[NoAccessorMethod]
		public int minimum_font_size { get; set construct; }
		[NoAccessorMethod]
		public int minimum_logical_font_size { get; set construct; }
		[NoAccessorMethod]
		public string monospace_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public bool print_backgrounds { get; set construct; }
		[NoAccessorMethod]
		public bool resizable_text_areas { get; set construct; }
		[NoAccessorMethod]
		public string sans_serif_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string serif_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string spell_checking_languages { owned get; set construct; }
		[NoAccessorMethod]
		public bool tab_key_cycles_through_elements { get; set construct; }
		[NoAccessorMethod]
		public string user_agent { owned get; set construct; }
		[NoAccessorMethod]
		public string user_stylesheet_uri { owned get; set construct; }
		[NoAccessorMethod]
		public float zoom_step { get; set construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_view_get_type ()")]
	public class WebView : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView ();
		public bool can_copy_clipboard ();
		public bool can_cut_clipboard ();
		public bool can_go_back ();
		public bool can_go_back_or_forward (int steps);
		public bool can_go_forward ();
		public bool can_paste_clipboard ();
		public bool can_redo ();
		public bool can_show_mime_type (string mime_type);
		public bool can_undo ();
		[NoWrapper]
		public virtual string choose_file (WebKit.WebFrame frame, string old_file);
		public void delete_selection ();
		public void execute_script (string script);
		public unowned WebKit.WebBackForwardList get_back_forward_list ();
		public Gtk.TargetList get_copy_target_list ();
		public unowned string get_custom_encoding ();
		public unowned WebKit.DOM.Document get_dom_document ();
		public bool get_editable ();
		public unowned string get_encoding ();
		public unowned WebKit.WebFrame get_focused_frame ();
		public bool get_full_content_zoom ();
		public WebKit.HitTestResult get_hit_test_result (Gdk.EventButton event);
		public Gdk.Pixbuf get_icon_pixbuf ();
		public unowned string get_icon_uri ();
		public unowned WebKit.WebInspector get_inspector ();
		public WebKit.LoadStatus get_load_status ();
		public unowned WebKit.WebFrame get_main_frame ();
		public Gtk.TargetList get_paste_target_list ();
		public double get_progress ();
		public unowned WebKit.WebSettings get_settings ();
		public unowned string get_title ();
		public bool get_transparent ();
		public unowned string get_uri ();
		public WebKit.WebViewViewMode get_view_mode ();
		public bool get_view_source_mode ();
		public unowned WebKit.ViewportAttributes get_viewport_attributes ();
		public unowned WebKit.WebWindowFeatures get_window_features ();
		public float get_zoom_level ();
		public void go_back ();
		public void go_back_or_forward (int steps);
		public void go_forward ();
		public bool go_to_back_forward_item (WebKit.WebHistoryItem item);
		public bool has_selection ();
		[Deprecated (since = "1.1.1")]
		public void load_html_string (string content, string base_uri);
		public void load_request (WebKit.NetworkRequest request);
		public void load_string (string content, string mime_type, string encoding, string base_uri);
		public void load_uri (string uri);
		public uint mark_text_matches (string string, bool case_sensitive, uint limit);
		[Deprecated (since = "1.1.1")]
		public void open (string uri);
		public void reload ();
		public void reload_bypass_cache ();
		public bool search_text (string text, bool case_sensitive, bool forward, bool wrap);
		public void set_custom_encoding (string encoding);
		public void set_editable (bool flag);
		public void set_full_content_zoom (bool full_content_zoom);
		public void set_highlight_text_matches (bool highlight);
		public void set_maintains_back_forward_list (bool flag);
		[NoWrapper]
		public virtual void set_scroll_adjustments (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment);
		public void set_settings (WebKit.WebSettings settings);
		public void set_transparent (bool flag);
		public void set_view_mode (WebKit.WebViewViewMode mode);
		public void set_view_source_mode (bool view_source_mode);
		public void set_zoom_level (float zoom_level);
		[NoWrapper]
		public virtual bool should_allow_editing_action ();
		public void stop_loading ();
		public void unmark_text_matches ();
		public void zoom_in ();
		public void zoom_out ();
		public Gtk.TargetList copy_target_list { owned get; }
		public string custom_encoding { get; set; }
		public bool editable { get; set; }
		public string encoding { get; }
		public bool full_content_zoom { get; set; }
		public string icon_uri { get; }
		[NoAccessorMethod]
		public Gtk.IMContext im_context { owned get; }
		public WebKit.LoadStatus load_status { get; }
		public Gtk.TargetList paste_target_list { owned get; }
		public double progress { get; }
		[NoAccessorMethod]
		public bool self_scrolling { get; construct; }
		public WebKit.WebSettings settings { get; set; }
		public string title { get; }
		public bool transparent { get; set; }
		public string uri { get; }
		public WebKit.WebViewViewMode view_mode { get; set; }
		public WebKit.ViewportAttributes viewport_attributes { get; }
		[NoAccessorMethod]
		public WebKit.WebInspector web_inspector { owned get; }
		[NoAccessorMethod]
		public WebKit.WebWindowFeatures window_features { owned get; set; }
		public float zoom_level { get; set; }
		public virtual signal bool close_web_view ();
		public virtual signal bool console_message (string message, int line_number, string source_id);
		[HasEmitter]
		public virtual signal void copy_clipboard ();
		public signal Gtk.Widget create_plugin_widget (string mime_type, string uri, GLib.HashTable<void*,void*> param);
		public signal WebKit.WebView create_web_view (WebKit.WebFrame frame);
		[HasEmitter]
		public virtual signal void cut_clipboard ();
		public signal void database_quota_exceeded (GLib.Object frame, GLib.Object database);
		public signal void document_load_finished (WebKit.WebFrame object);
		public signal bool download_requested (GLib.Object download);
		public signal void editing_began ();
		public signal void editing_ended ();
		public signal void frame_created (WebKit.WebFrame object);
		public signal void geolocation_policy_decision_cancelled (WebKit.WebFrame frame);
		public signal bool geolocation_policy_decision_requested (WebKit.WebFrame frame, WebKit.GeolocationPolicyDecision policy_decision);
		public signal void hovering_over_link (string title, string uri);
		public signal void icon_loaded (string icon_uri);
		public signal void load_committed (WebKit.WebFrame frame);
		public signal bool load_error (WebKit.WebFrame web_frame, string uri, void* web_error);
		public signal void load_finished (WebKit.WebFrame frame);
		public signal void load_progress_changed (int progress);
		public signal void load_started (WebKit.WebFrame frame);
		public signal bool mime_type_policy_decision_requested (WebKit.WebFrame frame, WebKit.NetworkRequest request, string mimetype, WebKit.WebPolicyDecision policy_decision);
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		public signal bool navigation_policy_decision_requested (WebKit.WebFrame frame, WebKit.NetworkRequest request, WebKit.WebNavigationAction navigation_action, WebKit.WebPolicyDecision policy_decision);
		public virtual signal WebKit.NavigationResponse navigation_requested (WebKit.WebFrame frame, WebKit.NetworkRequest request);
		public signal bool new_window_policy_decision_requested (WebKit.WebFrame frame, WebKit.NetworkRequest request, WebKit.WebNavigationAction navigation_action, WebKit.WebPolicyDecision policy_decision);
		public signal void onload_event (WebKit.WebFrame frame);
		[HasEmitter]
		public virtual signal void paste_clipboard ();
		public signal void populate_popup (Gtk.Menu menu);
		public signal bool print_requested (WebKit.WebFrame web_frame);
		[HasEmitter]
		public virtual signal void redo ();
		public signal void resource_request_starting (WebKit.WebFrame web_frame, WebKit.WebResource web_resource, WebKit.NetworkRequest request, WebKit.NetworkResponse response);
		public virtual signal bool script_alert (WebKit.WebFrame frame, string alert_message);
		public virtual signal bool script_confirm (WebKit.WebFrame frame, string confirm_message, void* did_confirm);
		public virtual signal bool script_prompt (WebKit.WebFrame frame, string message, string default_value, void* value);
		[HasEmitter]
		public virtual signal void select_all ();
		public signal void selection_changed ();
		public signal bool should_apply_style (WebKit.DOM.CSSStyleDeclaration object, WebKit.DOM.Range p0);
		public signal bool should_begin_editing (WebKit.DOM.Range object);
		public signal bool should_change_selected_range (WebKit.DOM.Range object, WebKit.DOM.Range p0, WebKit.SelectionAffinity p1, bool p2);
		public signal bool should_delete_range (WebKit.DOM.Range object);
		public signal bool should_end_editing (WebKit.DOM.Range object);
		public signal bool should_insert_node (WebKit.DOM.Node object, WebKit.DOM.Range p0, WebKit.InsertAction p1);
		public signal bool should_insert_text (string object, WebKit.DOM.Range p0, WebKit.InsertAction p1);
		public signal bool should_show_delete_interface_for_element (WebKit.DOM.HTMLElement object);
		public signal void status_bar_text_changed (string object);
		[Deprecated (since = "1.1.4")]
		public signal void title_changed (WebKit.WebFrame frame, string title);
		[HasEmitter]
		public virtual signal void undo ();
		public signal void user_changed_contents ();
		public signal void viewport_attributes_changed (WebKit.ViewportAttributes object);
		public signal void viewport_attributes_recompute_requested (WebKit.ViewportAttributes object);
		public virtual signal bool web_view_ready ();
		public signal void window_object_cleared (WebKit.WebFrame frame, void* context, void* window_object);
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_id = "webkit_web_window_features_get_type ()")]
	public class WebWindowFeatures : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebWindowFeatures ();
		public bool equal (WebKit.WebWindowFeatures features2);
		[NoAccessorMethod]
		public bool fullscreen { get; set construct; }
		[NoAccessorMethod]
		public int height { get; set construct; }
		[NoAccessorMethod]
		public bool locationbar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool menubar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool scrollbar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool statusbar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool toolbar_visible { get; set construct; }
		[NoAccessorMethod]
		public int width { get; set construct; }
		[NoAccessorMethod]
		public int x { get; set construct; }
		[NoAccessorMethod]
		public int y { get; set construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h", type_cname = "WebKitSpellCheckerInterface", type_id = "webkit_spell_checker_get_type ()")]
	public interface SpellChecker : GLib.Object {
		public abstract void check_spelling_of_string (string word, int misspelling_location, int misspelling_length);
		public abstract string get_autocorrect_suggestions_for_misspelled_word (string word);
		public abstract void ignore_word (string word);
		public abstract void learn_word (string word);
		public abstract void update_spell_checking_languages (string languages);
	}
	[CCode (cheader_filename = "webkit/webkit.h", cname = "_WebKitWebPluginMIMEType", has_type_id = false)]
	public struct _WebPluginMIMEType {
		public weak string name;
		public weak string description;
		public weak string extensions;
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_CACHE_MODEL_")]
	public enum CacheModel {
		DEFAULT,
		DOCUMENT_VIEWER,
		WEB_BROWSER,
		DOCUMENT_BROWSER
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_DOWNLOAD_ERROR_")]
	public enum DownloadError {
		CANCELLED_BY_USER,
		DESTINATION,
		NETWORK
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_DOWNLOAD_STATUS_")]
	public enum DownloadStatus {
		ERROR,
		CREATED,
		STARTED,
		CANCELLED,
		FINISHED
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_EDITING_BEHAVIOR_")]
	public enum EditingBehavior {
		MAC,
		WINDOWS,
		UNIX
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_HIT_TEST_RESULT_CONTEXT_")]
	[Flags]
	public enum HitTestResultContext {
		DOCUMENT,
		LINK,
		IMAGE,
		MEDIA,
		SELECTION,
		EDITABLE
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_INSERT_ACTION_")]
	public enum InsertAction {
		TYPED,
		PASTED,
		DROPPED
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_LOAD_")]
	public enum LoadStatus {
		PROVISIONAL,
		COMMITTED,
		FINISHED,
		FIRST_VISUALLY_NON_EMPTY_LAYOUT,
		FAILED
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_NAVIGATION_RESPONSE_")]
	public enum NavigationResponse {
		ACCEPT,
		IGNORE,
		DOWNLOAD
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_NETWORK_ERROR_")]
	public enum NetworkError {
		FAILED,
		TRANSPORT,
		UNKNOWN_PROTOCOL,
		CANCELLED,
		FILE_DOES_NOT_EXIST;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_PLUGIN_ERROR_")]
	public enum PluginError {
		FAILED,
		CANNOT_FIND_PLUGIN,
		CANNOT_LOAD_PLUGIN,
		JAVA_UNAVAILABLE,
		CONNECTION_CANCELLED,
		WILL_HANDLE_LOAD;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_POLICY_ERROR_")]
	public enum PolicyError {
		FAILED,
		CANNOT_SHOW_MIME_TYPE,
		CANNOT_SHOW_URL,
		FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE,
		CANNOT_USE_RESTRICTED_PORT;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_SELECTION_AFFINITY_")]
	public enum SelectionAffinity {
		UPSTREAM,
		DOWNSTREAM
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_WEB_NAVIGATION_REASON_")]
	public enum WebNavigationReason {
		LINK_CLICKED,
		FORM_SUBMITTED,
		BACK_FORWARD,
		RELOAD,
		FORM_RESUBMITTED,
		OTHER
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_WEB_VIEW_TARGET_INFO_")]
	public enum WebViewTargetInfo {
		HTML,
		TEXT,
		IMAGE,
		URI_LIST,
		NETSCAPE_URL
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_WEB_VIEW_VIEW_MODE_")]
	public enum WebViewViewMode {
		WINDOWED,
		FLOATING,
		FULLSCREEN,
		MAXIMIZED,
		MINIMIZED
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned string application_cache_get_database_directory_path ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static bool check_version (uint major, uint minor, uint micro);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void geolocation_policy_allow (WebKit.GeolocationPolicyDecision decision);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void geolocation_policy_deny (WebKit.GeolocationPolicyDecision decision);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static WebKit.CacheModel get_cache_model ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned Soup.Session get_default_session ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint64 get_default_web_database_quota ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned WebKit.IconDatabase get_icon_database ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned string get_web_database_directory_path ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned WebKit.WebPluginDatabase get_web_plugin_database ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint major_version ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint micro_version ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint minor_version ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void remove_all_web_databases ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_cache_model (WebKit.CacheModel cache_model);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_default_web_database_quota (uint64 defaultQuota);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_text_checker (GLib.Object checker);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_web_database_directory_path (string path);
}
